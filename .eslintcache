[{"/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/index.js":"1","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/reportWebVitals.js":"2","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/App.js":"3","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/Login/Login.js":"4","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Components/Header/Header.js":"5","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/UserReg/UserReg.js":"6","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Components/Footer/Footer.js":"7","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/SearchDoc/SearchDoc.js":"8","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/SearchPatient/SearchPatient.js":"9","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/DoctorRegisteration/DoctorRegisteration.js":"10","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/PatientRegisteration/PatientRegisteration.js":"11","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/History/history.js":"12","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/AddPatientData/AddPatientData.js":"13","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/ViewData/ViewData.js":"14","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/PatientSide/AccesstoDoctor/AccesstoDoctor.js":"15","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/PatientSide/PatientFullDetail/FullDetail.js":"16","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/ethereum/web3.js":"17","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/ethereum/Admin.js":"18","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Eth/Ethutil.js":"19","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/ipfs.js":"20","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/viewToDoctor/viewToDoctor.js":"21","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/Shared/Sidebar.js":"22","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Components/Header/HeaderDoctor.js":"23","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Components/Header/HeaderAdmin.js":"24","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Components/Header/HeaderPatients.js":"25"},{"size":633,"mtime":1618989432552,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":1618989455467,"results":"28","hashOfConfig":"27"},{"size":3056,"mtime":1620181863130,"results":"29","hashOfConfig":"27"},{"size":1487,"mtime":1619967479274,"results":"30","hashOfConfig":"27"},{"size":1225,"mtime":1620190907736,"results":"31","hashOfConfig":"27"},{"size":817,"mtime":1619854080566,"results":"32","hashOfConfig":"27"},{"size":1379,"mtime":1619488816734,"results":"33","hashOfConfig":"27"},{"size":2163,"mtime":1619854106602,"results":"34","hashOfConfig":"27"},{"size":2095,"mtime":1619854106602,"results":"35","hashOfConfig":"27"},{"size":7455,"mtime":1620178981671,"results":"36","hashOfConfig":"27"},{"size":6665,"mtime":1620145611279,"results":"37","hashOfConfig":"27"},{"size":7232,"mtime":1619939215176,"results":"38","hashOfConfig":"27"},{"size":9700,"mtime":1619967166312,"results":"39","hashOfConfig":"27"},{"size":6871,"mtime":1619968204641,"results":"40","hashOfConfig":"27"},{"size":9241,"mtime":1619874391594,"results":"41","hashOfConfig":"27"},{"size":5271,"mtime":1619968291006,"results":"42","hashOfConfig":"27"},{"size":488,"mtime":1619876826975,"results":"43","hashOfConfig":"27"},{"size":171,"mtime":1619854080522,"results":"44","hashOfConfig":"27"},{"size":2152,"mtime":1619928862776,"results":"45","hashOfConfig":"27"},{"size":137,"mtime":1619947369620,"results":"46","hashOfConfig":"27"},{"size":5296,"mtime":1619968065318,"results":"47","hashOfConfig":"27"},{"size":751,"mtime":1620178926015,"results":"48","hashOfConfig":"27"},{"size":1227,"mtime":1620190946782,"results":"49","hashOfConfig":"27"},{"size":1258,"mtime":1620190938995,"results":"50","hashOfConfig":"27"},{"size":1228,"mtime":1620190957694,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"lxknxq",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"54"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"54"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/index.js",[],["113","114"],"/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/reportWebVitals.js",[],"/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/App.js",["115","116"],"import Login from './utils/Containers/Login/Login'\nimport React from 'react'\nimport Footer from './utils/Components/Footer/Footer'\nimport Header from './utils/Components/Header/Header';\nimport CardExampleFluid from './utils/Containers/UserReg/UserReg';\nimport {Route} from 'react-router-dom'\nimport './App.css';\nimport SearchDoc from './utils/Containers/SearchDoc/SearchDoc';\nimport SearchPatient from './utils/Containers/SearchPatient/SearchPatient';\nimport AddPatientData from './utils/Containers/AddPatientData/AddPatientData';\nimport History from './utils/Containers/History/history';\nimport DoctorRegisteration from './utils/Containers/DoctorRegisteration/DoctorRegisteration';\nimport PatientRegisteration from './utils/Containers/PatientRegisteration/PatientRegisteration';\nimport ViewData from './utils/Containers/ViewData/ViewData';\nimport AccesstoDoctor from './utils/Containers/PatientSide/AccesstoDoctor/AccesstoDoctor';\nimport FullDetail from './utils/Containers/PatientSide/PatientFullDetail/FullDetail';\nimport viewToDoctor from './utils/Containers/viewToDoctor/viewToDoctor'\n\nimport HeaderA from './utils/Components/Header/HeaderAdmin'\nimport HeaderD from './utils/Components/Header/HeaderDoctor'\nimport HeaderP from './utils/Components/Header/HeaderPatients'\nimport web3 from './ethereum/web3'\nimport Admin from './ethereum/Admin'\n\n\n\n\n\nclass App extends React.Component{\n  state ={\n    dExist:false,\n    pExist:false,\n    isOwner:false\n  }\n\n  async componentDidMount(){\n    const accounts = await web3.eth.getAccounts();\n    const dExist = await Admin.methods.existD(accounts[0]).call()\n    const pExist = await Admin.methods.existP(accounts[0]).call()\n    const isOwner = await Admin.methods.owner().call() === accounts[0]\n    this.setState({\n      dExist,\n      pExist,\n      isOwner\n    })\n\n\n\n  }\n  render(){\n     console.log(window.location.pathname);\n    let sidebarComponent = <Header />\n    if(this.state.isOwner && !(window.location.pathname === '/')){\n      sidebarComponent = <HeaderA />\n     } else if(this.state.pExist && !(window.location.pathname === '/')){\n      sidebarComponent = <HeaderP />\n     } else if(this.state.dExist && !(window.location.pathname === '/')){\n      sidebarComponent = <HeaderD />\n     }\n\n  return (\n    <div className=\"App\">\n    <searchDoc />\n    {sidebarComponent}\n\n    <Route path=\"/\" exact component={Login} />\n    <Route path=\"/newform\" component={CardExampleFluid} />\n    <Route path=\"/home\" component={Login} />\n    <Route path=\"/doctorregisteration\" component={DoctorRegisteration} />\n    <Route path=\"/patientregisteration\" component={PatientRegisteration} />\n    <Route path=\"/addpatientdata\" component={AddPatientData} />\n    <Route path=\"/viewdata\" component={ViewData} />\n    <Route path=\"/accesstodoctor\" component={AccesstoDoctor} />\n    <Route path=\"/doctorhistory\" component={History} />\n    <Route path=\"/full-details\" component={FullDetail} />    \n    <Route path=\"/viewtodoctor\" component={viewToDoctor} />    \n\n\n    \n    <Footer />\n    </div>\n    \n  );\n  }\n}\n\nexport default App;\n","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/Login/Login.js",[],"/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Components/Header/Header.js",["117","118","119","120","121"],"/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/UserReg/UserReg.js",[],"/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Components/Footer/Footer.js",[],"/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/SearchDoc/SearchDoc.js",["122","123"],"import React from 'react';\nimport {FormControl,Button,InputGroup,Table} from 'react-bootstrap'\nimport './searchdoc.css'\nimport web3 from '../../../ethereum/web3'\nimport Admin from '../../../ethereum/Admin'\n\nclass SearchDoc extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {value: ''};\n    \n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n      }\n    \n      handleChange(event) {\n        this.setState({value: event.target.value});\n      }\n    \n      handleSubmit(event) {\n        alert('searching');\n        console.log(this.state)\n        event.preventDefault();\n        this.setState({value: ''});\n      }\n\n    render(){\n\n    return (\n        <div className=\"search-doc-main\">\n            <div className=\"search-container\">\n                <h1>Find a Doctor</h1>\n                <h3>Search a doctor in your location</h3>\n                <InputGroup className=\"mb-4\">\n                    <FormControl\n                    placeholder=\"Enter a City\"\n                    aria-label=\"city name\"\n                    value = {this.state.value}\n                    onChange = {this.handleChange}\n                />\n                <InputGroup.Append>\n                    <Button variant=\"success\" onClick={this.handleSubmit}>Search</Button>\n                </InputGroup.Append>\n                </InputGroup>\n                <Table striped bordered hover>\n                    <thead>\n                        <tr>\n                        <th>#</th>\n                        <th>Name</th>\n                        <th>Owner</th>\n                        <th>Mobile No.</th>\n                        <th>Blood Group</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        </tr>\n                    </tbody>\n                 </Table>   \n            </div>\n        </div>\n    )\n}\n}\nexport default SearchDoc;","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/SearchPatient/SearchPatient.js",[],"/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/DoctorRegisteration/DoctorRegisteration.js",["124","125"],"import React from 'react'\nimport './doctorregisteration.css'\nimport { Form, Input,Button,Message } from 'semantic-ui-react'\nimport web3 from '../../../ethereum/web3'\nimport Admin from '../../../ethereum/Admin'\nimport {connectToPatients,\n  connectToDoctor,\n  addToPatients,\n  addToDoctor,\n  doctorDetails,\n  patientDetails\n} from '../../Eth/Ethutil'\n\n\nclass DoctorRegisteration extends React.Component{\n\n constructor(props) {\n   super(props);\n   this.state = {\n     loading:false,\n    name: '',\n   selectBloodgrp : \"\",\n   dob : \"\",\n   email: \"\",\n   mobno : \"\",\n   adharno: \"\",\n   identity : \"\",\n   blockchainaddress: '',\n   address : \"\",\n   zip: \"\",\n   state: \"\",\n   country: \"\",\n   errorMessage:'',\n   hidden:true\n   };\n\n   this.handleChange = this.handleChange.bind(this);\n   this.handleSubmit = this.handleSubmit.bind(this);\n   this.handleDropdownChange = this.handleDropdownChange.bind(this);\n }\n async componentDidMount(){\n  const accounts = await web3.eth.getAccounts(); \n  const dExist = await Admin.methods.existD(accounts[0]).call()\n  const pExist = await Admin.methods.existP(accounts[0]).call()\n  console.log(dExist,pExist );\n\n  if(dExist){\n    const dAddr = await addToDoctor(accounts[0])\n    console.log('dAddr',dAddr);\n    const {nme,mno,id} =  await doctorDetails(dAddr)\n    console.log('details',nme,mno,id);\n  }\n\n  if(pExist){\n    const pAddr = await addToPatients(accounts[0])\n    console.log('pAddr',pAddr);\n    const {nme,mno,bg} = await patientDetails(pAddr)\n    console.log('details',nme,mno,bg);\n  }\n\n\n }\n\n handleChange(event) {\n   const target = event.target;\n   const value = target.value;\n   const name = target.name;\n\n   this.setState({\n    [name]: value\n  });\n }\n\n handleDropdownChange(e) {\n  this.setState({ \n    selectBloodgrp: e.target.value,\n    selectGender: e.target.value\n  });\n}\n\n\n async handleSubmit(event) {\n\n  try {\n    this.setState({loading:true})\n    event.preventDefault();\n     console.log(this.state)\n     const accounts = await web3.eth.getAccounts(); \n     \n  console.log(122);\n     await Admin.methods.addDoctor(\n       this.state.name,\n       this.state.adharno,\n       this.state.mobno,\n       this.state.blockchainaddress,\n       this.state.identity\n     ).send({\n      from: accounts[0]\n     })\n     console.log(123);\n     this.setState({\n     name:\"\",\n     selectBloodgrp : \"\",\n     dob : \"\",\n     email: \"\",\n     mobno : \"\",\n     adharno: '',\n     identity : \"\",\n     blockchainaddress: \"\",\n     address : \"\",\n     zip: \"\",\n     state: \"\",\n     country: \"\",\n     });\n    \n  } catch (error) {\n    this.setState({errorMessage: error.message, hidden:false});\n    \n  }\n  this.setState({loading:false});\n   \n }\n\n isFormValid = () => {\n  const {\n    name,\n   selectBloodgrp,\n   dob,\n   email,\n   mobno ,\n   adharno,\n   identity ,\n   blockchainaddress,\n   address ,\n   zip,\n   state,\n   country,\n   } =  this.state\n\n   console.log(\"in button\");\n  return name && selectBloodgrp && dob && email && mobno && adharno && identity && blockchainaddress && address && zip && state && country\n }\n\n\n render(){\n    return(\n      <div>\n      \n      <div className=\"main-reg-form\">\n      <Form className=\"reg-form\" action='' onSubmit={this.handleSubmit}>\n        <h2>Doctor Registration</h2>\n        <hr />\n        <Form.Field\n             id='form-input-control-name'\n             name=\"name\"\n             control={Input}\n             label='Name'\n             placeholder='Full Name'\n             value = {this.state.name}\n             onChange = {this.handleChange}\n             required\n           />\n          <Form.Group width='equals'>\n          <label className='fieldcss'>\n            Blood Group\n            <select id=\"dropdown-2\" onChange={this.handleDropdownChange}>\n              <option value=\"N/A\">N/A</option>\n              <option value=\"A+\">A+</option>\n              <option value=\"A-\">A-</option>\n              <option value=\"B+\">B+</option>\n              <option value=\"B-\">B-</option>\n              <option value=\"AB+\">AB-</option>\n              <option value=\"AB-\">AB-</option>\n              <option value=\"O+\">O+</option>\n              <option value=\"O-\">O-</option>\n            </select>\n          </label>   \n          \n          <div className=\"fieldcss\">\n          <label>Date of Birth\n            <input\n             id='dob'\n            name=\"dob\"\n             type=\"date\" \n             placeholder='dd-mm-yyyy'\n             value = {this.state.dob}\n            onChange = {this.handleChange}/>\n            </label>\n          </div>\n        </Form.Group>  \n        <Form.Field\n          id='form-input-control-error-email'\n          name=\"email\"\n          control={Input}\n          label='Email'\n          placeholder='joe@example.com'\n          value = {this.state.email}\n            onChange = {this.handleChange}\n          width={10}\n          required\n        />\n        <Form.Field\n          id='mobno'\n          name='mobno'\n          control={Input}\n          label='Mobile no.'\n          placeholder='Mobile no.'\n          value = {this.state.mobno}\n            onChange = {this.handleChange}\n          required\n          width={10}\n        />\n        <Form.Field\n          id='adharno'\n          name='adharno'\n          control={Input}\n          label='Adhar No.'\n          placeholder='Adhar no.'\n          value = {this.state.adharno}\n            onChange = {this.handleChange}\n          required\n          width={10}\n        />\n        <Form.Field\n          id='identity'\n          name='identity'\n          control={Input}\n          label='Identity No.'\n          placeholder='Identity no.'\n          value = {this.state.identity}\n            onChange = {this.handleChange}\n          required\n          width={10}\n        />\n        <Form.Field\n          id='blockchainaddress'\n          name='blockchainaddress'\n          control={Input}\n          label='Blockchain Address'\n          placeholder='Blockchain Address'\n          value = {this.state.blockchainaddress}\n            onChange = {this.handleChange}\n          required\n          width={10}\n        />\n       <Form.Field\n          id='address'\n          name='address'\n          control={Input}\n          label='Address'\n          placeholder='Address'\n          value = {this.state.address}\n            onChange = {this.handleChange}\n          required\n        />\n        <Form.Group>\n        <Form.Field\n          id='Zip Code'\n          name='zip'\n          control={Input}\n          label='Zip Code'\n          placeholder='Zip Code'\n          value = {this.state.zip}\n            onChange = {this.handleChange}\n          required\n        />\n        <Form.Field\n          id='state'\n          name='state'\n          control={Input}\n          label='State'\n          placeholder='State'\n          value = {this.state.state}\n            onChange = {this.handleChange}\n         required\n       />\n       <Form.Field\n         id='Country'\n         name='country'\n         control={Input}\n         label='Country'\n         placeholder='Country'\n         value = {this.state.country}\n            onChange = {this.handleChange}\n         required\n       />\n       </Form.Group>\n      \n      <Button primary onClick = {this.handleSubmit} disabled={!this.isFormValid()} loading ={this.state.loading} > Submit</Button>\n      \n\n     </Form>\n     <Message error header=\"Oops!\" content={this.state.errorMessage} hidden = {this.state.hidden}  negetive compact/>\n     </div>\n     </div>\n   )\n}\n}\nexport default DoctorRegisteration;","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/PatientRegisteration/PatientRegisteration.js",["126"],"import React from 'react'\nimport './patientregisteration.css'\nimport { Form, Input, Button,Message } from 'semantic-ui-react'\nimport web3 from '../../../ethereum/web3'\nimport Admin from '../../../ethereum/Admin'\n\nclass PatientRegisteration extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading:false,\n      errorMessage:'',\n      hidden:true,\n      name: \"\",\n      selectBloodgrp: \"\",\n      dob: \"\",\n      email: \"\",\n      mobno: \"\",\n      adharno: \"\",\n      blockchainaddress: \"\",\n      address: \"\",\n      zip: \"\",\n      state: \"\",\n      country: \"\",\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleDropdownChange = this.handleDropdownChange.bind(this);\n  }\n\n  handleChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleDropdownChange(e) {\n    this.setState({\n      selectBloodgrp: e.target.value,\n    });\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    this.setState({loading:true})\n\n    try {\n      const accounts = await web3.eth.getAccounts();\n\n    const patient = await Admin.methods.addPatient(\n      this.state.name,\n      this.state.adharno,\n      this.state.selectBloodgrp,\n      this.state.mobno,\n      this.state.blockchainaddress,\n    ).send({\n      from: accounts[0]\n    })\n    this.setState({\n      name: \"\",\n      selectBloodgrp: \"\",\n      dob: \"\",\n      email: \"\",\n      mobno: \"\",\n      adharno: \"\",\n      blockchainaddress: \"\",\n      address: \"\",\n      zip: \"\",\n      state: \"\",\n      country: \"\",\n    });\n\n      \n    } catch (error) {\n      this.setState({errorMessage: error.message, hidden:false});\n      \n    }\n  this.setState({loading:false})\n  }\n\n  isFormValid = () => {\n    const {\n      name,\n     selectBloodgrp,\n     dob,\n     email,\n     mobno ,\n     adharno,\n     blockchainaddress,\n     address ,\n     zip,\n     state,\n     country,\n     } =  this.state\n  \n     console.log(\"in button\");\n    return name && selectBloodgrp && dob && email && mobno && adharno && blockchainaddress && address && zip && state && country\n   }\n\n\n  render() {\n    return (\n      <div className=\"main-reg-form\">\n        <Form className=\"reg-form\" action='' onSubmit={this.handleSubmit}>\n          <h2>Patient Registration</h2>\n          <hr />\n          <Form>\n            <Form.Field\n              id='form-input-control-name'\n              name=\"name\"\n              control={Input}\n              label='Name'\n              placeholder='Full Name'\n              value={this.state.name}\n              onChange={this.handleChange}\n              required\n            />\n          </Form>\n          <Form.Group width='equals'>\n            <label className='fieldcss'>\n              Blood Group\n            <select required id=\"dropdown-2\" onChange={this.handleDropdownChange}>\n                <option value=\"N/A\">N/A</option>\n                <option value=\"A+\">A+</option>\n                <option value=\"A-\">A-</option>\n                <option value=\"B+\">B+</option>\n                <option value=\"B-\">B-</option>\n                <option value=\"AB+\">AB+</option>\n                <option value=\"AB-\">AB-</option>\n                <option value=\"O+\">O+</option>\n                <option value=\"O-\">O-</option>\n              </select>\n            </label>\n\n            <div className=\"fieldcss\">\n              <label>Date of Birth\n            <input\n                  id='dob'\n                  name=\"dob\"\n                  type=\"date\"\n                  placeholder='dd-mm-yyyy'\n                  value={this.state.dob}\n                  onChange={this.handleChange} />\n              </label>\n            </div>\n          </Form.Group>\n          <Form.Field\n            id='form-input-control-error-email'\n            name=\"email\"\n            control={Input}\n            label='Email'\n            placeholder='joe@example.com'\n            value={this.state.email}\n            onChange={this.handleChange}\n            width={10}\n            required\n          />\n          <Form.Field\n            id='mobno'\n            name='mobno'\n            control={Input}\n            label='Mobile no.'\n            placeholder='Mobile no.'\n            value={this.state.mobno}\n            onChange={this.handleChange}\n            required\n            width={10}\n          />\n          <Form.Field\n            id='adharno'\n            name='adharno'\n            control={Input}\n            label='Adhar no.'\n            placeholder='Adhar no.'\n            value={this.state.adharno}\n            onChange={this.handleChange}\n            required\n            width={10}\n          />\n          <Form.Field\n            id='blockchainaddress'\n            name='blockchainaddress'\n            control={Input}\n            label='Blockchain Address'\n            placeholder='Blockchain Address'\n            value={this.state.blockchainaddress}\n            onChange={this.handleChange}\n            required\n            width={10}\n          />\n\n          <Form.Field\n            id='address'\n            name='address'\n            control={Input}\n            label='Address'\n            placeholder='Address'\n            value={this.state.address}\n            onChange={this.handleChange}\n            required\n          />\n          <Form.Group>\n            <Form.Field\n              id='Zip Code'\n              name='zip'\n              control={Input}\n              label='Zip Code'\n              placeholder='Zip Code'\n              value={this.state.zip}\n              onChange={this.handleChange}\n              required\n            />\n            <Form.Field\n              id='state'\n              name='state'\n              control={Input}\n              label='State'\n              placeholder='State'\n              value={this.state.state}\n              onChange={this.handleChange}\n              required\n            />\n            <Form.Field\n              id='Country'\n              name='country'\n              control={Input}\n              label='Country'\n              placeholder='Country'\n              value={this.state.country}\n              onChange={this.handleChange}\n              required\n            />\n          </Form.Group>\n          <br />\n          <Button primary onClick = {this.handleSubmit} disabled={!this.isFormValid()} loading ={this.state.loading} > Submit</Button>\n          \n        </Form>\n        <Message error header=\"Oops!\" content={this.state.errorMessage} hidden = {this.state.hidden}  negetive compact/>\n        \n      </div>\n    )\n  }\n}\nexport default PatientRegisteration;","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/History/history.js",["127","128"],"import React, { Component } from 'react'\nimport { FaUserMd,FaAddressCard,FaNotesMedical, FaUsers } from 'react-icons/fa'\nimport './history.css'\nimport {Link} from 'react-router-dom'\nimport web3 from '../../../ethereum/web3'\nimport {connectToPatients,\n    connectToDoctor,\n    addToPatients,\n    addToDoctor,\n    doctorDetails,\n    patientDetails\n  } from '../../Eth/Ethutil' ;\n  import Admin from '../../../ethereum/Admin'\n\n\nclass History extends Component {\n    state = {\n        name:'',\n        mno:'',\n        id:'',\n        len:0,\n        record:[],\n        finalObj:[],\n        account:''\n    }\n    async componentDidMount(){\n        const accounts = await web3.eth.getAccounts();\n        const dExist = await Admin.methods.existD(accounts[0]).call()\n        if(!dExist){\n        alert(\"Doctor does not exist on this address\");\n        }else{\n        const dAddr = await addToDoctor(accounts[0]);\n        const {nme,mno,id,len} =  await doctorDetails(dAddr)\n        let record = []\n        const doctor = await connectToDoctor(dAddr) \n        this.setState({account:accounts[0]})\n\n\n        for(let i=0;i<len;i++){\n            let temp = await doctor.methods.pRecord(i).call()\n           let obj = {\n               date:temp[0],\n               details:temp[2],\n               hash:temp[3],\n               patient:temp[1]\n           }\n           record.push(obj)\n           //console.log(obj);\n        }\n        console.log(record);\n        this.setState({\n            name:nme,\n            mno,\n            id,\n            len,\n            record\n        })\n\n        for(let i=0; i < this.state.record.length; i++){\n            console.log(1);\n            const patient = await connectToPatients(this.state.record[i].patient);\n            console.log(2);\n            const pId = await patient.methods.owner().call();\n            console.log(3);\n            const pName = await patient.methods.name().call();\n            console.log(4);\n            const date = this.uToTime(this.state.record[i].date)\n            console.log(5);\n            const obj = {\n                pName,\n                pId,\n                date,\n                patient:this.state.record[i].patient,\n                details:this.state.record[i].details,\n                hash:this.state.record[i].hash,\n            }\n            console.log(6);\n            const temp = [...this.state.finalObj, obj]\n            console.log(7);\n            this.setState({\n                finalObj:temp\n            })\n        }\n        console.log(8);\n        console.log(this.state.finalObj);\n    }\n    }\n\n   uToTime(t){\n    const milliseconds = t * 1000 \n    const dateObject = new Date(milliseconds)\n    const humanDateFormat = dateObject.toLocaleString()\n       const arr = humanDateFormat.split(',')\n       return arr[0]\n   }\n   \n\n    render() {\n        return (\n            <div className=\"history-main\">\n            <h1 className=\"greet-doc\">Welcome back srv smn !!!</h1>\n            <div class=\"ui cards\">\n              <div className=\"card doc-card\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-4 doc-detail-1\"><FaUserMd size='4em' color='white' className=\"faicons\"/></div>\n                            <div className=\"col-8 doc-card-content\">\n                                <h2>{this.state.name}</h2>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"card doc-card\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-4 doc-detail-2\"><FaAddressCard size='4em' color='white' className=\"faicons\"/></div>\n                            <div className=\"col-8 doc-card-content\">\n                                <h4>{this.state.mno}</h4>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"card doc-card\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-4 doc-detail-3\"><FaNotesMedical size='4em' color='white' className=\"faicons\"/></div>\n                            <div className=\"col-8 doc-card-content\">\n                            <h4>ID: {this.state.id}</h4></div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"card doc-card\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-4 doc-detail-4\"><FaUsers size='4em' color='white' className=\"faicons\"/></div>\n                            <div className=\"col-8 doc-card-content\">\n                            <h4>Total Patient : {this.state.len}</h4></div>\n                        </div>\n                    </div>\n                </div>\n            </div> \n\n\n                <div className=\"col-lg-12 grid-margin stretch-card\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                    <h2 className=\"card-title\">\n                        <span>\n                        <h1>History</h1>\n                        </span>\n                    </h2>\n                    <div className=\"table-responsive\">\n                        <table className=\"table table-striped\">\n                        <thead>\n                            <tr>\n                            <th> User ID </th>\n                            <th> Name </th>\n                            <th> Date</th>\n                            <th> Details</th>\n                            <th>  View </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                           {\n                                this.state.finalObj.reverse().map((rec, index) =>{\n                                  return(\n                                 <tr>\n                                 <td>{rec.pId}</td>\n                                 <td>{rec.pName}</td>\n                                 <td>{rec.date}</td>\n                                 <td>{rec.details}</td>\n                                 <td>\n                                     <Link to={\n                                                    { \n                                                        pathname: \"/viewdata\",\n                                                        myCustomProps: {...rec, dAddr:this.state.account}\n                                                    }\n                                                }>\n                                     <input type=\"submit\" value='View' className=\"btn-history\"/>\n                                     </Link>\n                                 </td>\n                                 </tr>\n                                )\n                            })\n\n                           }\n                        </tbody>\n                        </table>\n                    </div>\n                    </div>\n                </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default History;","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/AddPatientData/AddPatientData.js",["129","130","131","132"],"import React, { Component } from 'react'\nimport { Form,TextArea } from 'semantic-ui-react'\nimport {FormControl,Button,InputGroup} from 'react-bootstrap'\nimport { FaUser,FaAddressCard,FaNotesMedical, FaKey } from 'react-icons/fa'\nimport {TiTick} from 'react-icons/ti'\nimport {ImCross} from 'react-icons/im'\nimport './addpatientdata.css'\nimport web3 from '../../../ethereum/web3'\nimport Admin from '../../../ethereum/Admin'\nimport {connectToPatients,\n  connectToDoctor,\n  addToPatients,\n  addToDoctor,\n  doctorDetails,\n  patientDetails,\n  rwAccess\n} from '../../Eth/Ethutil' ;\n\nimport ipfs from '../../../ipfs'\nimport { Link } from 'react-router-dom'\n\n\nclass AddPatientData extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n          name:'',\n          mno:'',\n          bg:'',\n          description: '',\n          selectedFile: null,\n          count:0,\n          value:'',\n          r : <ImCross />,\n          rw : <ImCross />,\n          account:'',\n          disables:true,\n          pCAddr:''\n        };\n        \n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleChangeSearch = this.handleChangeSearch.bind(this);\n        this.handleSubmitSearch = this.handleSubmitSearch.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n       // this.handleSubmitShow = this.handleSubmitShow.bind(this);\n        this.onFileChange = this.onFileChange.bind(this);\n      }\n    \n\n      viewHtml(){\n          return(\n              <div className=\"view-elements\">\n                \n            <div class=\"ui cards\">\n            <div className=\"card add-card\">\n                  <div className=\"container\">\n                      <div className=\"row\">\n                          <div className=\"col-4 detail-1\"><FaUser size='4em' color='white' className=\"faicons\"/></div>\n                          <div className=\"col-8 card-content\">\n                              <h2>{this.state.name}</h2>\n                          </div>\n                      </div>\n                  </div>\n              </div>\n              <div className=\"card\">\n                  <div className=\"container\">\n                      <div className=\"row\">\n                          <div className=\"col-4 detail-2\"><FaAddressCard size='4em' color='white' className=\"faicons\"/></div>\n                          <div className=\"col-8 card-content\">\n                              <h4>{this.state.mno}<br />\n                              </h4>\n                          </div>\n                      </div>\n                  </div>\n              </div>\n\n              <div className=\"card\">\n                  <div className=\"container\">\n                      <div className=\"row\">\n                          <div className=\"col-4 detail-3\"><FaNotesMedical size='4em' color='white' className=\"faicons\"/></div>\n                          <div className=\"col-8 card-content\"><h4>Blood Group : {this.state.bg}</h4></div>\n                      </div>\n                  </div>\n              </div>\n\n              <div className=\"card\">\n                  <div className=\"container\">\n                  <div className=\"row\">\n                      <div className=\"col-4 access-1\">\n                        <FaKey size='4em' color='white' className=\"faicons\"/>\n                      </div>  \n                      <div className=\"col-8 access-2\">  \n                        <div className=\"row\">\n                            <div className=\"read-write\">\n                            Read &nbsp; {this.state.r} <br />\n                            Read + Write &nbsp; {this.state.rw}\n                            </div>\n                       </div>\n                      </div>   \n                    </div>\n                  </div>\n              </div>\n             \n              </div> \n              \n              <div className=\"patient-form\">\n                <div className=\"card\">\n                <div className=\"card-body\">        \n                    <Form>\n                        <Form.Field\n                        id = 'description'\n                        name='description'\n                        control={TextArea}\n                        label='Description'\n                        placeholder='Description'\n                        value = {this.state.description}\n                        onChange = {this.handleChange}\n                        required='required'/>\n\n                        <div>\n                            <input type=\"file\" onChange={this.onFileChange} required/>\n                        </div>\n                        <br />\n                        <Button type='submit' color='green'onClick={this.handleSubmit}>Submit</Button>\n                        &nbsp; &nbsp; &nbsp;\n                        <Link to = {\n                                                    { \n                                                        pathname: \"/viewtodoctor\",\n                                                        myCustomProps: {value:this.state.value}\n                                                    }\n                                                }>\n                    <Button variant=\"success\" onClick={this.handleSubmitShow}>Previos Record</Button>\n                    \n                    </Link>\n                    </Form>\n                </div>\n                </div>\n            </div> \n              </div>\n              \n         )\n      }\n\n async componentDidMount(){\n        const accounts = await web3.eth.getAccounts();\n        const dExist = await Admin.methods.existD(accounts[0]).call()\n        if(!dExist)\n        alert(\"Doctor does not exist on this address\");\n        this.setState({\n          account:accounts[0]\n        })\n      }\n\n      async handleSubmitSearch(event) {\n        event.preventDefault();\n        console.log(this.state.value)\n        let pExist = false;\n        if(web3.utils.checkAddressChecksum(this.state.value)){\n          pExist = await Admin.methods.existP(this.state.value).call()\n        }\n\n        if(!pExist)\n        {\n          alert(\"Patients does not exist on this address\");\n        }\n        else{\n          const pAddr = await addToPatients(this.state.value);\n          this.setState({\n            pCAddr: pAddr\n          })\n          const {nme,mno,bg} = await patientDetails(pAddr)\n          this.setState({\n            name:nme,\n            mno,\n            bg,\n            count:1,\n          })\n        }\n        let r,rw\n\n        if(pExist){\n          let{read,write} =  await rwAccess(this.state.value, this.state.account)\n          r = read\n          rw = write\n        }\n        console.log(r,rw)\n\n        if(r==true){\n            this.setState({r: <TiTick size=\"2em\"/>})\n        }\n        if(rw==true){\n            this.setState({rw: <TiTick size=\"2em\"/>})\n        }\n      }\n      handleChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n    \n        this.setState({\n          [name]: value\n        });\n      }\n      handleChangeSearch(event) {\n        this.setState({value: event.target.value});\n      }\n    \n      onFileChange = event => {\n\n        event.preventDefault()\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n    reader.onloadend = () => {\n      this.setState({ selectedFile: Buffer(reader.result) })\n      console.log('buffer', this.state.selectedFile)\n    }\n      };\n\n\n\n      async handleSubmit(event) {\n        event.preventDefault();\n        // Create an object of formData\n      const formData = new FormData();\n    \n      // Update the formData object\n      formData.append(\n        \"myFile\",\n        this.state.selectedFile\n      );\n    \n      if(this.state.description==='' && this.state.selectedFile===null){\n          alert(\"Please enter the File and Description\")\n      }\n      // Details of the uploaded file\n      console.log(this.state.selectedFile);\n         console.log(this.state.description)\n\n         try{\n          const ipfsUpload =  await ipfs.files.add(this.state.selectedFile)\n          console.log(typeof ipfsUpload[0].hash);\n          const hash = ipfsUpload[0].hash\n          const dAddr = await addToDoctor(this.state.account);\n          console.log(1);\n          const doctor = await connectToDoctor(dAddr)\n          console.log(2);\n          console.log(doctor);\n          await doctor.methods.addPatientRecord(\n            this.state.description,\n            hash,\n            this.state.pCAddr\n          ).send({\n            from:this.state.account\n        })\n        console.log(3);\n         }\n         catch{\n          alert('Data can not be written ')\n         }\n       \n         this.setState({\n           description:'',\n           selectedFile: null,\n         });\n      }\n    \n\n    render() {\n      \n        let viewCond;\n        if(this.state.count !== 0){\n            viewCond = this.viewHtml()\n        }\n        return (\n            <div className=\"add-patient-main\">\n            \n                <h1 className=\"greet\">Welcome, hope you are good !!!</h1>\n                <InputGroup className=\"mb-3\">\n                    <FormControl\n                    placeholder=\"Enter Blockchain address\"\n                    aria-label=\"city name\"\n                    value = {this.state.value}\n                    onChange = {this.handleChangeSearch}\n                />\n                <InputGroup.Append>\n                    <Button variant=\"success\" onClick={this.handleSubmitSearch}>Search</Button>\n                </InputGroup.Append>\n                </InputGroup>\n                <br/>\n                { viewCond }\n            \n            </div>\n\n        )\n    }\n}\n\n\nexport default AddPatientData;","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/ViewData/ViewData.js",["133","134","135","136","137","138","139","140","141","142","143"],"import React, { Component } from 'react'\nimport { FaUser, FaAddressCard, FaNotesMedical, FaKey } from 'react-icons/fa'\nimport './viewdata.css'\nimport web3 from '../../../ethereum/web3'\nimport Admin from '../../../ethereum/Admin'\nimport {\n    connectToPatients,\n    connectToDoctor,\n    addToPatients,\n    addToDoctor,\n    doctorDetails,\n    patientDetails,\n    rwAccess\n} from '../../Eth/Ethutil'\nimport { TiTick } from 'react-icons/ti'\nimport { ImCross } from 'react-icons/im'\nimport { Modal, Button } from 'react-bootstrap'\n\n\nclass ViewData extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            mno: '',\n            bg: '',\n            r: <ImCross />,\n            rw: <ImCross />,\n            show: false,\n            url:''\n        }\n        this.handleClose = this.handleClose.bind(this);\n        this.handleShow = this.handleShow.bind(this);\n\n    }\n\n    async componentDidMount() {\n        console.log(this.props.location.myCustomProps\n        );\n        const { nme, mno, bg } = await patientDetails(this.props.location.myCustomProps.patient)\n        const { read, write } = await rwAccess(this.props.location.myCustomProps.pId, this.props.location.myCustomProps.dAddr)\n\n\n        if (read == true) {\n            this.setState({ r: <TiTick size=\"2em\" /> })\n        }\n        if (write == true) {\n            this.setState({ rw: <TiTick size=\"2em\" /> })\n        }\n        const url = 'https://ipfs.io/ipfs/' + this.props.location.myCustomProps.hash\n\n        this.setState({\n            mno,\n            bg,\n            url\n\n        })\n\n\n    }\n\n    handleClose = () => this.setState({ show: false })\n    handleShow = () => this.setState({ show: true })\n\n    render() {\n        return (\n            <div className=\"viewdata\">\n                <div className=\"\">\n                    <h1>View Patient's Data</h1>\n                    <div className=\"patient-cards\">\n\n                        <div class=\"ui cards\">\n                            <div className=\"card\">\n                                <div className=\"container\">\n                                    <div className=\"row\">\n                                        <div className=\"col-4 detail-1\"><FaUser size='4em' color='white' className=\"faicons\" /></div>\n                                        <div className=\"col-8 card-content\">\n                                            <h2>{this.props.location.myCustomProps.pName}</h2>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"card\">\n                                <div className=\"container\">\n                                    <div className=\"row\">\n                                        <div className=\"col-4 detail-2\"><FaAddressCard size='4em' color='white' className=\"faicons\" /></div>\n                                        <div className=\"col-8 card-content\">\n                                            <h4>{this.state.mno}</h4>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"card\">\n                                <div className=\"container\">\n                                    <div className=\"row\">\n                                        <div className=\"col-4 detail-3\"><FaNotesMedical size='4em' color='white' className=\"faicons\" /></div>\n                                        <div className=\"col-8 card-content\"><h4>Blood Group : {this.state.bg}</h4></div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"card\">\n                                <div className=\"container\">\n                                    <div className=\"row\">\n                                        <div className=\"col-4 access-1\">\n                                            <FaKey size='4em' color='white' className=\"faicons\" />\n                                        </div>\n                                        <div className=\"col-8 access-2\">\n                                            <div className=\"row\">\n                                                <div className=\"read-write\">\n                                                    Read &nbsp; {this.state.r} <br />\n                                                         Write &nbsp; {this.state.rw}\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"displayform\">\n                    <div className=\"container\">\n                        <div>\n\n                            <h4>Details</h4>\n                            <p><h5>Remark:</h5>  {this.props.location.myCustomProps.details}\n                            </p>\n                            <p><h5>Date:</h5>  {this.props.location.myCustomProps.date}\n                            </p>\n                            <h4>Patient blockchain address</h4>\n                            <p>{this.props.location.myCustomProps.pId}</p>\n\n                            <div>\n                                <h4>File</h4>\n                                <Button variant=\"primary\" onClick={this.handleShow}>\n                                   SHOW PRESCRIPTION\n                                    </Button>\n\n\n                                <Modal show={this.state.show} onHide={this.handleClose} size = 'lg'>\n                                    <Modal.Header closeButton>\n                                        <Modal.Title>PRESCRIPTION</Modal.Title>\n                                    </Modal.Header>\n                                    <Modal.Body>\n                                    <iframe src= {this.state.url} style={{width:'500%' ,height:'500px'}} className = 'img-fluid'frameBorder=\"0\"></iframe>\n                                    </Modal.Body>\n                                    <Modal.Footer>\n                                        <Button variant=\"secondary\" onClick={this.handleClose}>\n                                            Close\n                                         </Button>\n                                       \n                                    </Modal.Footer>\n                                </Modal>\n\n\n\n                                \n                            </div>\n                        </div>\n\n                    </div>\n                </div>\n\n\n            </div >\n\n        )\n    }\n}\n\nexport default ViewData;\n","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/PatientSide/AccesstoDoctor/AccesstoDoctor.js",["144","145","146","147","148"],"import React, { Component } from 'react'\nimport {FaAddressCard,FaUserMd,FaNotesMedical, FaSearchPlus, FaKey} from 'react-icons/fa'\nimport {TiTick} from 'react-icons/ti'\nimport {ImCross} from 'react-icons/im'\nimport {Form, Button} from 'react-bootstrap'\nimport './accesstodoctor.css'\nimport web3 from '../../../../ethereum/web3'\nimport Admin from '../../../../ethereum/Admin'\nimport {connectToPatients,\n    connectToDoctor,\n    addToPatients,\n    addToDoctor,\n    doctorDetails,\n    patientDetails,\n    rwAccess\n  } from '../../../Eth/Ethutil' ;\n\nclass AccesstoDoctor extends Component {\n    constructor(props){\n        super(props);\n        \n        this.state = {value: '',\n                    account:'',\n                    count:0,\n                    dName:'',\n                    dId:'',\n                    dMNO:'',\n                    r : <ImCross />,\n                     rw : <ImCross />,\n                     disabled:true\n    };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmitSearch = this.handleSubmitSearch.bind(this);\n        this.handleSubmitView = this.handleSubmitView.bind(this);\n        this.handleSubmitWrite = this.handleSubmitWrite.bind(this);\n        this.handleSubmitRemoveView = this.handleSubmitRemoveView.bind(this);\n        this.handleSubmitRemoveWrite = this.handleSubmitRemoveWrite.bind(this);\n    }\n    async componentDidMount(){\n        const accounts = await web3.eth.getAccounts();\n        const pExist = await Admin.methods.existP(accounts[0]).call()\n        if(!pExist)\n        alert(\"Patients does not exist on this address\");\n        this.setState({\n          account:accounts[0]\n        })\n    }\n    async handleSubmitRemoveView(event){\n        event.preventDefault();\n        const pAddr = await addToPatients(this.state.account)\n        const patient = await connectToPatients(pAddr)\n        await patient.methods.removeViewer(this.state.value).send({\n            from:this.state.account\n        })\n\n\n    }\n\n    async handleSubmitRemoveWrite(event){\n        event.preventDefault();\n        const pAddr = await addToPatients(this.state.account)\n        const patient = await connectToPatients(pAddr)\n       const dAddr = await addToDoctor(this.state.value)\n        await patient.methods.removeEditor(dAddr).send({\n            from:this.state.account\n        })\n        \n    }\n    async handleSubmitSearch(event) {\n        event.preventDefault();\n        let dExist = false;\n        if(web3.utils.checkAddressChecksum(this.state.value)){\n          dExist = await Admin.methods.existD(this.state.value).call()\n        }\n\n        if(!dExist)\n        {\n          alert(\"Doctor does not exist on this address\");\n        }else{\n            const dAddr = await addToDoctor(this.state.value)\n            const {nme,mno,id} =  await doctorDetails(dAddr)\n            let{read,write} =  await rwAccess(this.state.account, this.state.value)\n            let r = read\n            let rw = write\n            if(r==true){\n                this.setState({r: <TiTick size=\"2em\"/>})\n            }\n            if(rw==true){\n                this.setState({rw: <TiTick size=\"2em\"/>})\n            }\n            this.setState({\n              dName:nme,\n              dId:id,\n              dMNO:mno,\n              count:1,\n              disabled:false\n            })\n          }\n    }\n\n    async handleSubmitView(event) {\n        event.preventDefault();\n        const pExist = await Admin.methods.existP(this.state.account).call()\n        if(!pExist)\n        {\n          alert(\"You are not a Patient , Unable to call method\");\n        } else{\n\n        const pAddr = await addToPatients(this.state.account)\n        const patient = await connectToPatients(pAddr)\n\n        let dExist = false\n        if(web3.utils.checkAddressChecksum(this.state.value)){\n            dExist = await Admin.methods.existD(this.state.value).call()\n          }\n        \n        if(dExist){\n            await patient.methods.addViewer(this.state.value).send({\n                from:this.state.account\n            })\n        } else{\n            alert(\"Doctor does not exist on this address\");\n        }\n    }\n\n\n\n    }\n\n    async handleSubmitWrite(event) {\n        event.preventDefault();\n        const pExist = await Admin.methods.existP(this.state.account).call()\n        if(!pExist)\n        {\n          alert(\"You are not a Patient , Unable to call method\");\n        } else{\n\n        const pAddr = await addToPatients(this.state.account)\n        const patient = await connectToPatients(pAddr)\n\n        let dExist = false\n        let dAddr\n        if(web3.utils.checkAddressChecksum(this.state.value)){\n            dExist = await Admin.methods.existD(this.state.value).call()\n             dAddr = await addToDoctor(this.state.value)\n          }\n        \n        if(dExist){\n            await patient.methods.addEditor(dAddr).send({\n                from:this.state.account\n            })\n        } else{\n            alert(\"Doctor does not exist on this address\");\n        }\n    }\n        \n    }\n\n\n        handleChange=(e)=>{\n            this.setState({value : e.target.value})\n            console.log(this.state)\n        }\n    readHTM(){\n        return(\n            <div class=\"ui cards\">\n            <div className=\"card doc-card\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-4 doc-detail-1\"><FaUserMd size='4em' color='white' className=\"faicons\"/></div>\n                            <div className=\"col-8 doc-card-content\">\n                                <h2>{this.state.dName}</h2>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"card doc-card\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-4 doc-detail-2\"><FaAddressCard size='4em' color='white' className=\"faicons\"/></div>\n                            <div className=\"col-8 doc-card-content\">\n                            <h4>Contact : {this.state.dMNO}</h4>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"card doc-card\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-4 doc-detail-3\"><FaNotesMedical size='4em' color='white' className=\"faicons\"/></div>\n                            <div className=\"col-8 doc-card-content\">\n                            <h4>ID : {this.state.dId}</h4>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"card doc-card\">\n                  <div className=\"container\">\n                  <div className=\"row\">\n                      <div className=\"col-4 access-1\">\n                        <FaKey size='4em' color='white' className=\"faicons\"/>\n                      </div>  \n                      <div className=\"col-8 access-2\">  \n                        <div className=\"row\">\n                            <div className=\"read-write\">\n                            Read &nbsp; {this.state.r} <br />\n                            Read + Write &nbsp; {this.state.rw}\n                            </div>\n                       </div>\n                      </div>   \n                    </div>\n                  </div>\n              </div>\n\n            </div> \n        )\n    }\n    render() {\n        let htm = null\n        if(this.state.count != 0){\n            htm = this.readHTM()\n        }\n        return (\n            <div className=\"access-to-doctor-main\">\n                <div className=\"container\">\n               {htm}\n\n                <div className=\"access-to-doctor\">\n                <div className=\"container\">\n                <Form>\n                    <Form.Group >\n                        <Form.Label>Blockchain Address</Form.Label>\n                        <Form.Control \n                            type=\"text\" \n                            placeholder=\"Blockchain Address\"\n                            value = {this.state.value}\n                            onChange = {this.handleChange} />\n                    </Form.Group>\n                </Form>  \n                <Button variant=\"primary\" className=\"py-2 btns\" onClick={this.handleSubmitSearch} > Search <FaSearchPlus color = \"white\"/> </Button>\n                <Button variant=\"success\" className=\"py-2 btns\" onClick={this.handleSubmitView} disabled={this.state.disabled}>Add View</Button>\n                <Button variant=\"success\" className=\"py-2 btns\" onClick={this.handleSubmitWrite} disabled={this.state.disabled}> Add Write</Button>  \n                <Button variant=\"danger\" className=\"py-2 btns\" onClick={this.handleSubmitRemoveView} disabled={this.state.disabled}>Remove View</Button>\n                <Button variant=\"danger\" className=\"py-2 \" onClick={this.handleSubmitRemoveWrite} disabled={this.state.disabled}>Remove Write</Button>\n                </div> \n                </div> \n                </div>\n                </div>\n        )\n    }\n}\n\n\nexport default AccesstoDoctor;","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/PatientSide/PatientFullDetail/FullDetail.js",["149","150","151","152","153"],"import React, { Component } from 'react'\nimport Timeline from '@material-ui/lab/Timeline';\nimport TimelineItem from '@material-ui/lab/TimelineItem';\nimport TimelineSeparator from '@material-ui/lab/TimelineSeparator';\nimport TimelineConnector from '@material-ui/lab/TimelineConnector';\nimport TimelineContent from '@material-ui/lab/TimelineContent';\nimport TimelineDot from '@material-ui/lab/TimelineDot';\nimport { Paper } from '@material-ui/core';\nimport { FaUser, FaAddressCard, FaNotesMedical, FaKey } from 'react-icons/fa'\nimport './patienthistory.css'\nimport web3 from '../../../../ethereum/web3'\nimport Admin from '../../../../ethereum/Admin'\nimport { Modal, Button } from 'react-bootstrap'\n\nimport {\n\tconnectToPatients,\n\tconnectToDoctor,\n\taddToPatients,\n\taddToDoctor,\n\tdoctorDetails,\n\tpatientDetails,\n\trwAccess\n} from '../../../Eth/Ethutil'\n\n\n\nclass FullDetails extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\taccount: '',\n\t\t\tnme: '',\n\t\t\tmno: '',\n\t\t\tbg: '',\n\t\t\trecord: [],\n\t\t\tfinalObj: [],\n\t\t\tshow: false,\n\t\t\turl:''\n\t\t}\n\n\n\n\t\tthis.handleClose = this.handleClose.bind(this);\n\t\tthis.handleShow = this.handleShow.bind(this);\n\t}\n\n\thandleClose = () => this.setState({ show: false })\n\thandleShow = (event,hash) => {\n\t\tevent.preventDefault()\n\t\tconst url = 'https://ipfs.io/ipfs/'+ hash\n\t\tthis.setState({ show: true , url})}\n\n\tasync componentDidMount() {\n\t\tconst accounts = await web3.eth.getAccounts();\n\t\t\n\t\tconst pExist = await Admin.methods.existP(accounts[0]).call()\n\t\tif (!pExist) {\n\t\t\talert(\"Patients does not exist on this address\");\n\t\t}\n\t\telse {\n\t\t\tconst pAddr = await addToPatients(accounts[0])\n\t\t\tconst { nme, mno, bg } = await patientDetails(pAddr)\n\n\t\t\tconst patient = await connectToPatients(pAddr)\n\t\t\t\n\t\t\tconst len = await patient.methods.getLength().call({\n\t\t\t\tfrom: accounts[0]\n\t\t\t})\n\n\t\t\tlet record = []\n\n\t\t\tfor (let i = 0; i < len; i++) {\n\n\t\t\t\tconst temp = await patient.methods.getReport(i).call({\n\t\t\t\t\tfrom: accounts[0]\n\t\t\t\t})\n\t\t\t\tlet obj = {\n\t\t\t\t\tdate: temp[0],\n\t\t\t\t\tdoctor: temp[1],\n\t\t\t\t\tdetail: temp[2],\n\t\t\t\t\thash: temp[3]\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\trecord.push(obj)\n\n\t\t\t}\n\n\n\t\t\tlet temp = []\n\t\t\t\n\t\t\tfor (let i = 0; i < len; i++) {\n\n\t\t\t\tconst doctor = await connectToDoctor(record[i].doctor);\n\n\t\t\t\tconst dId = await doctor.methods.owner().call();\n\n\t\t\t\tconst dName = await doctor.methods.name().call();\n\n\t\t\t\tconst date = this.uToTime(record[i].date)\n\n\t\t\t\tconst obj = {\n\t\t\t\t\tdName,\n\t\t\t\t\tdId,\n\t\t\t\t\tdate,\n\t\t\t\t\tdetails: record[i].detail,\n\t\t\t\t\thash:record[i].hash,\n\t\t\t\t}\n\t\t\t\t  temp =  [...temp, obj]\n\t\t\t\t\n\t\t\t}\n\t\t\tthis.setState({\n\t\t\t\tnme,\n\t\t\t\tmno,\n\t\t\t\tbg,\n\t\t\t\taccount: accounts[0],\n\t\t\t\trecord,\n\t\t\t\tfinalObj: temp\n\t\t\t})\n\n\n\t\t}\n\t}\n\n\tuToTime(t) {\n\t\tconst milliseconds = t * 1000\n\t\tconst dateObject = new Date(milliseconds)\n\t\tconst humanDateFormat = dateObject.toLocaleString()\n\t\tconst arr = humanDateFormat.split(',')\n\t\treturn arr[0]\n\t}\n\n\ttoHtm(){\n\t\t\n\t}\n\n\trender() {\n\t\tconst paperstyle = {\n\t\t\tpadding: '8px 1px',\n\t\t\ttextAlign: 'center',\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"stages-main\">\n\n\t\t\t\t<div class=\"container\">\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"col-md-3\">\n\t\t\t\t\t\t\t<div class=\"card-counter primary\">\n\t\t\t\t\t\t\t\t<FaUser className='fa-icons' />\n\t\t\t\t\t\t\t\t<span class=\"count-name\">{this.state.nme}</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class=\"col-md-3\">\n\t\t\t\t\t\t\t<div class=\"card-counter success\">\n\t\t\t\t\t\t\t\t<FaAddressCard className='fa-icons' />\n\t\t\t\t\t\t\t\t<span class=\"count-name\">{this.state.mno}</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class=\"col-md-3\">\n\t\t\t\t\t\t\t<div class=\"card-counter danger\">\n\t\t\t\t\t\t\t\t<FaNotesMedical className='fa-icons' />\n\t\t\t\t\t\t\t\t<span class=\"count-name\">{this.state.bg}</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<div className=\"stages\">\n\t\t\t\t\t\t<Timeline align=\"alternate\">\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.state.finalObj.reverse().map((rec,index) =>{\n\t\t\t\t\t\t\t\t\t\tconsole.log(rec);\n\t\t\t\t\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t\t\t\t\t<TimelineItem key ={index}>\n\t\t\t\t\t\t\t\t\t\t\t<TimelineSeparator>\n\t\t\t\t\t\t\t\t\t\t\t\t<TimelineDot color=\"primary\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<TimelineConnector />\n\t\t\t\t\t\t\t\t\t\t\t</TimelineSeparator>\n\t\t\t\t\t\t\t\t\t\t\t<TimelineContent>\n\t\t\t\t\t\t\t\t\t\t\t\t<Paper elevation={3} style={paperstyle}>\n\t\t\t\t\t\t\t\t\t\t\t\t\tDate : {rec.date} <br />\n\t\t\t\t\t\t\t\t\t\t\t\t\tDetails: {rec.details} <br />\n\t\t\t\t\t\t\t\t\t\t\t\t\tDoctor: {rec.dName} <br />\n\t\t\t\t\t\t\t\t\t\t\t\t\tDoctor ID : {rec.dId} <br />\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Button variant=\"primary\" onClick={(event) => this.handleShow(event,rec.hash)} >\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tLaunch demo modal\n\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t</Paper>\n\t\t\t\t\t\t\t\t\t\t\t</TimelineContent>\n\t\t\t\t\t\t\t\t\t\t</TimelineItem>\n\t\t\t\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t<Modal show={this.state.show} onHide={this.handleClose} size='lg'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Modal.Header closeButton>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Modal.Title>PRESCRIPTION</Modal.Title>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Modal.Header>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Modal.Body>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<iframe src={this.state.url} style={{ width: '500%', height: '500px' }} className='img-fluid' frameBorder=\"0\"></iframe>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Modal.Body>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Modal.Footer>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button variant=\"secondary\" onClick={this.handleClose}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tClose\n\t\t\t\t\t\t\t\t\t\t\t\t\t </Button>\n\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Modal.Footer>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Modal>\n\n\t\t\t\t\t\t</Timeline>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\nexport default FullDetails;","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/ethereum/web3.js",[],"/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/ethereum/Admin.js",[],"/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Eth/Ethutil.js",[],"/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/ipfs.js",[],"/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/viewToDoctor/viewToDoctor.js",["154","155","156","157","158"],"import React, { Component } from 'react'\nimport Timeline from '@material-ui/lab/Timeline';\nimport TimelineItem from '@material-ui/lab/TimelineItem';\nimport TimelineSeparator from '@material-ui/lab/TimelineSeparator';\nimport TimelineConnector from '@material-ui/lab/TimelineConnector';\nimport TimelineContent from '@material-ui/lab/TimelineContent';\nimport TimelineDot from '@material-ui/lab/TimelineDot';\nimport { Paper } from '@material-ui/core';\nimport { FaUser, FaAddressCard, FaNotesMedical, FaKey } from 'react-icons/fa'\nimport './viewToDoctor.css'\nimport web3 from '../../../ethereum/web3'\nimport Admin from '../../../ethereum/Admin'\nimport { Modal, Button } from 'react-bootstrap'\n\nimport {\n\tconnectToPatients,\n\tconnectToDoctor,\n\taddToPatients,\n\taddToDoctor,\n\tdoctorDetails,\n\tpatientDetails,\n\trwAccess\n} from '../../Eth/Ethutil'\n\n\n\nclass viewToDoctor extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\taccount: '',\n\t\t\tnme: '',\n\t\t\tmno: '',\n\t\t\tbg: '',\n\t\t\trecord: [],\n\t\t\tfinalObj: [],\n\t\t\tshow: false,\n\t\t\turl:''\n\t\t}\n\n\n\n\t\tthis.handleClose = this.handleClose.bind(this);\n\t\tthis.handleShow = this.handleShow.bind(this);\n\t}\n\n\thandleClose = () => this.setState({ show: false })\n\thandleShow = (event,hash) => {\n\t\tevent.preventDefault()\n\t\tconst url = 'https://ipfs.io/ipfs/'+ hash\n\t\tthis.setState({ show: true , url})}\n\n\tasync componentDidMount() {\n\t\tconst accounts = await web3.eth.getAccounts();\n        const pId = this.props.location.myCustomProps.value\n\t\t\n\t\tconst pExist = await Admin.methods.existP(pId).call()\n\t\tif (!pExist) {\n\t\t\talert(\"Patients does not exist on this address\");\n\t\t}\n\t\telse {\n\t\t\tconst pAddr = await addToPatients(pId)\n\t\t\tconst { nme, mno, bg } = await patientDetails(pAddr)\n\n\t\t\tconst patient = await connectToPatients(pAddr)\n\t\t\t\n\t\t\tconst len = await patient.methods.getLength().call({\n\t\t\t\tfrom: accounts[0]\n\t\t\t})\n\n\t\t\tlet record = []\n\n\t\t\tfor (let i = 0; i < len; i++) {\n\n\t\t\t\tconst temp = await patient.methods.getReport(i).call({\n\t\t\t\t\tfrom: accounts[0]\n\t\t\t\t})\n\t\t\t\tlet obj = {\n\t\t\t\t\tdate: temp[0],\n\t\t\t\t\tdoctor: temp[1],\n\t\t\t\t\tdetail: temp[2],\n\t\t\t\t\thash: temp[3]\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\trecord.push(obj)\n\n\t\t\t}\n\n\n\t\t\tlet temp = []\n\t\t\t\n\t\t\tfor (let i = 0; i < len; i++) {\n\n\t\t\t\tconst doctor = await connectToDoctor(record[i].doctor);\n\n\t\t\t\tconst dId = await doctor.methods.owner().call();\n\n\t\t\t\tconst dName = await doctor.methods.name().call();\n\n\t\t\t\tconst date = this.uToTime(record[i].date)\n\n\t\t\t\tconst obj = {\n\t\t\t\t\tdName,\n\t\t\t\t\tdId,\n\t\t\t\t\tdate,\n\t\t\t\t\tdetails: record[i].detail,\n\t\t\t\t\thash:record[i].hash,\n\t\t\t\t}\n\t\t\t\t  temp =  [...temp, obj]\n\t\t\t\t\n\t\t\t}\n\t\t\tthis.setState({\n\t\t\t\tnme,\n\t\t\t\tmno,\n\t\t\t\tbg,\n\t\t\t\taccount: accounts[0],\n\t\t\t\trecord,\n\t\t\t\tfinalObj: temp\n\t\t\t})\n\n\n\t\t}\n\t}\n\n\tuToTime(t) {\n\t\tconst milliseconds = t * 1000\n\t\tconst dateObject = new Date(milliseconds)\n\t\tconst humanDateFormat = dateObject.toLocaleString()\n\t\tconst arr = humanDateFormat.split(',')\n\t\treturn arr[0]\n\t}\n\n\ttoHtm(){\n\t\t\n\t}\n\n\trender() {\n\t\tconst paperstyle = {\n\t\t\tpadding: '8px 1px',\n\t\t\ttextAlign: 'center',\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"stages-main\">\n\n\t\t\t\t<div class=\"container\">\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"col-md-3\">\n\t\t\t\t\t\t\t<div class=\"card-counter primary\">\n\t\t\t\t\t\t\t\t<FaUser className='fa-icons' />\n\t\t\t\t\t\t\t\t<span class=\"count-name\">{this.state.nme}</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class=\"col-md-3\">\n\t\t\t\t\t\t\t<div class=\"card-counter success\">\n\t\t\t\t\t\t\t\t<FaAddressCard className='fa-icons' />\n\t\t\t\t\t\t\t\t<span class=\"count-name\">{this.state.mno}</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class=\"col-md-3\">\n\t\t\t\t\t\t\t<div class=\"card-counter danger\">\n\t\t\t\t\t\t\t\t<FaNotesMedical className='fa-icons' />\n\t\t\t\t\t\t\t\t<span class=\"count-name\">{this.state.bg}</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<div className=\"stages\">\n\t\t\t\t\t\t<Timeline align=\"alternate\">\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.state.finalObj.map((rec,index) =>{\n\t\t\t\t\t\t\t\t\t\tconsole.log(rec);\n\t\t\t\t\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t\t\t\t\t<TimelineItem key ={index}>\n\t\t\t\t\t\t\t\t\t\t\t<TimelineSeparator>\n\t\t\t\t\t\t\t\t\t\t\t\t<TimelineDot color=\"primary\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<TimelineConnector />\n\t\t\t\t\t\t\t\t\t\t\t</TimelineSeparator>\n\t\t\t\t\t\t\t\t\t\t\t<TimelineContent>\n\t\t\t\t\t\t\t\t\t\t\t\t<Paper elevation={3} style={paperstyle}>\n\t\t\t\t\t\t\t\t\t\t\t\t\tDate : {rec.date} <br />\n\t\t\t\t\t\t\t\t\t\t\t\t\tDetails: {rec.details} <br />\n\t\t\t\t\t\t\t\t\t\t\t\t\tDoctor: {rec.dName} <br />\n\t\t\t\t\t\t\t\t\t\t\t\t\tDoctor ID : {rec.dId} <br />\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Button variant=\"primary\" onClick={(event) => this.handleShow(event,rec.hash)} >\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tLaunch demo modal\n\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t</Paper>\n\t\t\t\t\t\t\t\t\t\t\t</TimelineContent>\n\t\t\t\t\t\t\t\t\t\t</TimelineItem>\n\t\t\t\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t<Modal show={this.state.show} onHide={this.handleClose} size='lg'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Modal.Header closeButton>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Modal.Title>PRESCRIPTION</Modal.Title>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Modal.Header>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Modal.Body>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<iframe src={this.state.url} style={{ width: '500%', height: '500px' }} className='img-fluid' frameBorder=\"0\"></iframe>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Modal.Body>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Modal.Footer>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button variant=\"secondary\" onClick={this.handleClose}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tClose\n\t\t\t\t\t\t\t\t\t\t\t\t\t </Button>\n\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Modal.Footer>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Modal>\n\n\t\t\t\t\t\t</Timeline>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\nexport default viewToDoctor;","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/Shared/Sidebar.js",["159","160","161"],"/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Components/Header/HeaderDoctor.js",["162","163","164","165","166"],"/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Components/Header/HeaderAdmin.js",["167","168","169","170","171"],"/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Components/Header/HeaderPatients.js",["172","173","174","175","176"],{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","severity":1,"message":"182","line":8,"column":8,"nodeType":"183","messageId":"184","endLine":8,"endColumn":17},{"ruleId":"181","severity":1,"message":"185","line":9,"column":8,"nodeType":"183","messageId":"184","endLine":9,"endColumn":21},{"ruleId":"181","severity":1,"message":"186","line":2,"column":10,"nodeType":"183","messageId":"184","endLine":2,"endColumn":16},{"ruleId":"181","severity":1,"message":"187","line":2,"column":17,"nodeType":"183","messageId":"184","endLine":2,"endColumn":21},{"ruleId":"181","severity":1,"message":"188","line":2,"column":22,"nodeType":"183","messageId":"184","endLine":2,"endColumn":33},{"ruleId":"181","severity":1,"message":"189","line":2,"column":34,"nodeType":"183","messageId":"184","endLine":2,"endColumn":45},{"ruleId":"181","severity":1,"message":"190","line":5,"column":10,"nodeType":"183","messageId":"184","endLine":5,"endColumn":14},{"ruleId":"181","severity":1,"message":"191","line":4,"column":8,"nodeType":"183","messageId":"184","endLine":4,"endColumn":12},{"ruleId":"181","severity":1,"message":"192","line":5,"column":8,"nodeType":"183","messageId":"184","endLine":5,"endColumn":13},{"ruleId":"181","severity":1,"message":"193","line":6,"column":9,"nodeType":"183","messageId":"184","endLine":6,"endColumn":26},{"ruleId":"181","severity":1,"message":"194","line":7,"column":3,"nodeType":"183","messageId":"184","endLine":7,"endColumn":18},{"ruleId":"181","severity":1,"message":"195","line":56,"column":11,"nodeType":"183","messageId":"184","endLine":56,"endColumn":18},{"ruleId":"181","severity":1,"message":"196","line":8,"column":5,"nodeType":"183","messageId":"184","endLine":8,"endColumn":18},{"ruleId":"181","severity":1,"message":"197","line":11,"column":5,"nodeType":"183","messageId":"184","endLine":11,"endColumn":19},{"ruleId":"181","severity":1,"message":"193","line":10,"column":9,"nodeType":"183","messageId":"184","endLine":10,"endColumn":26},{"ruleId":"181","severity":1,"message":"198","line":14,"column":3,"nodeType":"183","messageId":"184","endLine":14,"endColumn":16},{"ruleId":"199","severity":1,"message":"200","line":190,"column":13,"nodeType":"201","messageId":"202","endLine":190,"endColumn":15},{"ruleId":"199","severity":1,"message":"200","line":193,"column":14,"nodeType":"201","messageId":"202","endLine":193,"endColumn":16},{"ruleId":"181","severity":1,"message":"191","line":4,"column":8,"nodeType":"183","messageId":"184","endLine":4,"endColumn":12},{"ruleId":"181","severity":1,"message":"192","line":5,"column":8,"nodeType":"183","messageId":"184","endLine":5,"endColumn":13},{"ruleId":"181","severity":1,"message":"193","line":7,"column":5,"nodeType":"183","messageId":"184","endLine":7,"endColumn":22},{"ruleId":"181","severity":1,"message":"194","line":8,"column":5,"nodeType":"183","messageId":"184","endLine":8,"endColumn":20},{"ruleId":"181","severity":1,"message":"196","line":9,"column":5,"nodeType":"183","messageId":"184","endLine":9,"endColumn":18},{"ruleId":"181","severity":1,"message":"203","line":10,"column":5,"nodeType":"183","messageId":"184","endLine":10,"endColumn":16},{"ruleId":"181","severity":1,"message":"198","line":11,"column":5,"nodeType":"183","messageId":"184","endLine":11,"endColumn":18},{"ruleId":"181","severity":1,"message":"204","line":40,"column":17,"nodeType":"183","messageId":"184","endLine":40,"endColumn":20},{"ruleId":"199","severity":1,"message":"200","line":44,"column":18,"nodeType":"201","messageId":"202","endLine":44,"endColumn":20},{"ruleId":"199","severity":1,"message":"200","line":47,"column":19,"nodeType":"201","messageId":"202","endLine":47,"endColumn":21},{"ruleId":"205","severity":1,"message":"206","line":147,"column":37,"nodeType":"207","endLine":147,"endColumn":145},{"ruleId":"181","severity":1,"message":"194","line":10,"column":5,"nodeType":"183","messageId":"184","endLine":10,"endColumn":20},{"ruleId":"181","severity":1,"message":"197","line":14,"column":5,"nodeType":"183","messageId":"184","endLine":14,"endColumn":19},{"ruleId":"199","severity":1,"message":"200","line":86,"column":17,"nodeType":"201","messageId":"202","endLine":86,"endColumn":19},{"ruleId":"199","severity":1,"message":"200","line":89,"column":18,"nodeType":"201","messageId":"202","endLine":89,"endColumn":20},{"ruleId":"199","severity":1,"message":"208","line":223,"column":29,"nodeType":"201","messageId":"202","endLine":223,"endColumn":31},{"ruleId":"181","severity":1,"message":"209","line":9,"column":49,"nodeType":"183","messageId":"184","endLine":9,"endColumn":54},{"ruleId":"181","severity":1,"message":"203","line":19,"column":2,"nodeType":"183","messageId":"184","endLine":19,"endColumn":13},{"ruleId":"181","severity":1,"message":"198","line":20,"column":2,"nodeType":"183","messageId":"184","endLine":20,"endColumn":15},{"ruleId":"181","severity":1,"message":"210","line":22,"column":2,"nodeType":"183","messageId":"184","endLine":22,"endColumn":10},{"ruleId":"205","severity":1,"message":"206","line":205,"column":16,"nodeType":"207","endLine":205,"endColumn":126},{"ruleId":"181","severity":1,"message":"209","line":9,"column":49,"nodeType":"183","messageId":"184","endLine":9,"endColumn":54},{"ruleId":"181","severity":1,"message":"203","line":19,"column":2,"nodeType":"183","messageId":"184","endLine":19,"endColumn":13},{"ruleId":"181","severity":1,"message":"198","line":20,"column":2,"nodeType":"183","messageId":"184","endLine":20,"endColumn":15},{"ruleId":"181","severity":1,"message":"210","line":22,"column":2,"nodeType":"183","messageId":"184","endLine":22,"endColumn":10},{"ruleId":"205","severity":1,"message":"206","line":206,"column":16,"nodeType":"207","endLine":206,"endColumn":126},{"ruleId":"181","severity":1,"message":"211","line":2,"column":22,"nodeType":"183","messageId":"184","endLine":2,"endColumn":35},{"ruleId":"181","severity":1,"message":"212","line":2,"column":37,"nodeType":"183","messageId":"184","endLine":2,"endColumn":50},{"ruleId":"181","severity":1,"message":"213","line":2,"column":52,"nodeType":"183","messageId":"184","endLine":2,"endColumn":66},{"ruleId":"181","severity":1,"message":"186","line":2,"column":10,"nodeType":"183","messageId":"184","endLine":2,"endColumn":16},{"ruleId":"181","severity":1,"message":"187","line":2,"column":17,"nodeType":"183","messageId":"184","endLine":2,"endColumn":21},{"ruleId":"181","severity":1,"message":"188","line":2,"column":22,"nodeType":"183","messageId":"184","endLine":2,"endColumn":33},{"ruleId":"181","severity":1,"message":"189","line":2,"column":34,"nodeType":"183","messageId":"184","endLine":2,"endColumn":45},{"ruleId":"181","severity":1,"message":"190","line":5,"column":10,"nodeType":"183","messageId":"184","endLine":5,"endColumn":14},{"ruleId":"181","severity":1,"message":"186","line":2,"column":10,"nodeType":"183","messageId":"184","endLine":2,"endColumn":16},{"ruleId":"181","severity":1,"message":"187","line":2,"column":17,"nodeType":"183","messageId":"184","endLine":2,"endColumn":21},{"ruleId":"181","severity":1,"message":"188","line":2,"column":22,"nodeType":"183","messageId":"184","endLine":2,"endColumn":33},{"ruleId":"181","severity":1,"message":"189","line":2,"column":34,"nodeType":"183","messageId":"184","endLine":2,"endColumn":45},{"ruleId":"181","severity":1,"message":"190","line":5,"column":10,"nodeType":"183","messageId":"184","endLine":5,"endColumn":14},{"ruleId":"181","severity":1,"message":"186","line":2,"column":10,"nodeType":"183","messageId":"184","endLine":2,"endColumn":16},{"ruleId":"181","severity":1,"message":"187","line":2,"column":17,"nodeType":"183","messageId":"184","endLine":2,"endColumn":21},{"ruleId":"181","severity":1,"message":"188","line":2,"column":22,"nodeType":"183","messageId":"184","endLine":2,"endColumn":33},{"ruleId":"181","severity":1,"message":"189","line":2,"column":34,"nodeType":"183","messageId":"184","endLine":2,"endColumn":45},{"ruleId":"181","severity":1,"message":"190","line":5,"column":10,"nodeType":"183","messageId":"184","endLine":5,"endColumn":14},"no-native-reassign",["214"],"no-negated-in-lhs",["215"],"no-unused-vars","'SearchDoc' is defined but never used.","Identifier","unusedVar","'SearchPatient' is defined but never used.","'Button' is defined but never used.","'Form' is defined but never used.","'FormControl' is defined but never used.","'NavDropdown' is defined but never used.","'Link' is defined but never used.","'web3' is defined but never used.","'Admin' is defined but never used.","'connectToPatients' is defined but never used.","'connectToDoctor' is defined but never used.","'patient' is assigned a value but never used.","'addToPatients' is defined but never used.","'patientDetails' is defined but never used.","'doctorDetails' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'addToDoctor' is defined but never used.","'nme' is assigned a value but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","Expected '!==' and instead saw '!='.","'FaKey' is defined but never used.","'rwAccess' is defined but never used.","'SidebarHeader' is defined but never used.","'SidebarFooter' is defined but never used.","'SidebarContent' is defined but never used.","no-global-assign","no-unsafe-negation"]
