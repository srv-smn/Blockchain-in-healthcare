[{"/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/index.js":"1","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/reportWebVitals.js":"2","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/App.js":"3","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/Login/Login.js":"4","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Components/Header/Header.js":"5","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/UserReg/UserReg.js":"6","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Components/Footer/Footer.js":"7","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/SearchDoc/SearchDoc.js":"8","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/SearchPatient/SearchPatient.js":"9","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/DoctorRegisteration/DoctorRegisteration.js":"10","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/PatientRegisteration/PatientRegisteration.js":"11","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/History/history.js":"12","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/AddPatientData/AddPatientData.js":"13","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/ViewData/ViewData.js":"14","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/PatientSide/AccesstoDoctor/AccesstoDoctor.js":"15","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/PatientSide/PatientFullDetail/FullDetail.js":"16","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/ethereum/web3.js":"17","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/ethereum/Admin.js":"18","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Eth/Ethutil.js":"19","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/ipfs.js":"20","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/viewToDoctor/viewToDoctor.js":"21"},{"size":633,"mtime":1618989432552,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":1618989455467,"results":"24","hashOfConfig":"23"},{"size":1881,"mtime":1619966259103,"results":"25","hashOfConfig":"23"},{"size":1487,"mtime":1619967479274,"results":"26","hashOfConfig":"23"},{"size":1408,"mtime":1619968877077,"results":"27","hashOfConfig":"23"},{"size":817,"mtime":1619854080566,"results":"28","hashOfConfig":"23"},{"size":1379,"mtime":1619488816734,"results":"29","hashOfConfig":"23"},{"size":2163,"mtime":1619854106602,"results":"30","hashOfConfig":"23"},{"size":2095,"mtime":1619854106602,"results":"31","hashOfConfig":"23"},{"size":6526,"mtime":1619854106598,"results":"32","hashOfConfig":"23"},{"size":5839,"mtime":1619854515141,"results":"33","hashOfConfig":"23"},{"size":7232,"mtime":1619939215176,"results":"34","hashOfConfig":"23"},{"size":9700,"mtime":1619967166312,"results":"35","hashOfConfig":"23"},{"size":6871,"mtime":1619968204641,"results":"36","hashOfConfig":"23"},{"size":9241,"mtime":1619874391594,"results":"37","hashOfConfig":"23"},{"size":5271,"mtime":1619968291006,"results":"38","hashOfConfig":"23"},{"size":488,"mtime":1619876826975,"results":"39","hashOfConfig":"23"},{"size":171,"mtime":1619854080522,"results":"40","hashOfConfig":"23"},{"size":2152,"mtime":1619928862776,"results":"41","hashOfConfig":"23"},{"size":137,"mtime":1619947369620,"results":"42","hashOfConfig":"23"},{"size":5296,"mtime":1619968065318,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"lxknxq",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/index.js",[],["91","92"],"/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/reportWebVitals.js",[],"/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/App.js",["93","94"],"/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/Login/Login.js",[],"/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Components/Header/Header.js",["95","96","97"],"/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/UserReg/UserReg.js",[],"/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Components/Footer/Footer.js",[],"/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/SearchDoc/SearchDoc.js",["98","99"],"import React from 'react';\nimport {FormControl,Button,InputGroup,Table} from 'react-bootstrap'\nimport './searchdoc.css'\nimport web3 from '../../../ethereum/web3'\nimport Admin from '../../../ethereum/Admin'\n\nclass SearchDoc extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {value: ''};\n    \n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n      }\n    \n      handleChange(event) {\n        this.setState({value: event.target.value});\n      }\n    \n      handleSubmit(event) {\n        alert('searching');\n        console.log(this.state)\n        event.preventDefault();\n        this.setState({value: ''});\n      }\n\n    render(){\n\n    return (\n        <div className=\"search-doc-main\">\n            <div className=\"search-container\">\n                <h1>Find a Doctor</h1>\n                <h3>Search a doctor in your location</h3>\n                <InputGroup className=\"mb-4\">\n                    <FormControl\n                    placeholder=\"Enter a City\"\n                    aria-label=\"city name\"\n                    value = {this.state.value}\n                    onChange = {this.handleChange}\n                />\n                <InputGroup.Append>\n                    <Button variant=\"success\" onClick={this.handleSubmit}>Search</Button>\n                </InputGroup.Append>\n                </InputGroup>\n                <Table striped bordered hover>\n                    <thead>\n                        <tr>\n                        <th>#</th>\n                        <th>Name</th>\n                        <th>Owner</th>\n                        <th>Mobile No.</th>\n                        <th>Blood Group</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        </tr>\n                    </tbody>\n                 </Table>   \n            </div>\n        </div>\n    )\n}\n}\nexport default SearchDoc;","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/SearchPatient/SearchPatient.js",[],"/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/DoctorRegisteration/DoctorRegisteration.js",["100","101"],"import React from 'react'\nimport './doctorregisteration.css'\nimport { Form, Input } from 'semantic-ui-react'\nimport web3 from '../../../ethereum/web3'\nimport Admin from '../../../ethereum/Admin'\nimport {connectToPatients,\n  connectToDoctor,\n  addToPatients,\n  addToDoctor,\n  doctorDetails,\n  patientDetails\n} from '../../Eth/Ethutil'\n\nclass DoctorRegisteration extends React.Component{\n\n constructor(props) {\n   super(props);\n   this.state = {\n    name: '',\n   selectBloodgrp : \"\",\n   dob : \"\",\n   email: \"\",\n   mobno : \"\",\n   adharno: \"\",\n   identity : \"\",\n   blockchainaddress: '',\n   address : \"\",\n   zip: \"\",\n   state: \"\",\n   country: \"\",\n   };\n\n   this.handleChange = this.handleChange.bind(this);\n   this.handleSubmit = this.handleSubmit.bind(this);\n   this.handleDropdownChange = this.handleDropdownChange.bind(this);\n }\n async componentDidMount(){\n  const accounts = await web3.eth.getAccounts(); \n  const dExist = await Admin.methods.existD(accounts[0]).call()\n  const pExist = await Admin.methods.existP(accounts[0]).call()\n  console.log(dExist,pExist );\n\n  if(dExist){\n    const dAddr = await addToDoctor(accounts[0])\n    console.log('dAddr',dAddr);\n    const {nme,mno,id} =  await doctorDetails(dAddr)\n    console.log('details',nme,mno,id);\n  }\n\n  if(pExist){\n    const pAddr = await addToPatients(accounts[0])\n    console.log('pAddr',pAddr);\n    const {nme,mno,bg} = await patientDetails(pAddr)\n    console.log('details',nme,mno,bg);\n  }\n\n\n }\n\n handleChange(event) {\n   const target = event.target;\n   const value = target.value;\n   const name = target.name;\n\n   this.setState({\n    [name]: value\n  });\n }\n\n handleDropdownChange(e) {\n  this.setState({ \n    selectBloodgrp: e.target.value,\n    selectGender: e.target.value\n  });\n}\n\n\n async handleSubmit(event) {\n  event.preventDefault();\n   console.log(this.state)\n   const accounts = await web3.eth.getAccounts(); \n   \n   await Admin.methods.addDoctor(\n     this.state.name,\n     this.state.adharno,\n     this.state.mobno,\n     this.state.blockchainaddress,\n     this.state.identity\n   ).send({\n    from: accounts[0]\n   })\n   this.setState({\n   name:\"\",\n   selectBloodgrp : \"\",\n   dob : \"\",\n   email: \"\",\n   mobno : \"\",\n   adharno: '',\n   identity : \"\",\n   blockchainaddress: \"\",\n   address : \"\",\n   zip: \"\",\n   state: \"\",\n   country: \"\",\n   });\n   \n }\n\n\n render(){\n    return(\n      <div className=\"main-reg-form\">\n      <Form className=\"reg-form\" action='' onSubmit={this.handleSubmit}>\n        <h2>Doctor Registration</h2>\n        <hr />\n        <Form.Field\n             id='form-input-control-name'\n             name=\"name\"\n             control={Input}\n             label='Name'\n             placeholder='Full Name'\n             value = {this.state.name}\n             onChange = {this.handleChange}\n             required\n           />\n          <Form.Group width='equals'>\n          <label className='fieldcss'>\n            Blood Group\n            <select id=\"dropdown-2\" onChange={this.handleDropdownChange}>\n              <option value=\"N/A\">N/A</option>\n              <option value=\"A+\">A+</option>\n              <option value=\"A-\">A-</option>\n              <option value=\"B+\">B+</option>\n              <option value=\"B-\">B-</option>\n              <option value=\"AB+\">AB-</option>\n              <option value=\"AB-\">AB-</option>\n              <option value=\"O+\">O+</option>\n              <option value=\"O-\">O-</option>\n            </select>\n          </label>   \n          \n          <div className=\"fieldcss\">\n          <label>Date of Birth\n            <input\n             id='dob'\n            name=\"dob\"\n             type=\"date\" \n             placeholder='dd-mm-yyyy'\n             value = {this.state.dob}\n            onChange = {this.handleChange}/>\n            </label>\n          </div>\n        </Form.Group>  \n        <Form.Field\n          id='form-input-control-error-email'\n          name=\"email\"\n          control={Input}\n          label='Email'\n          placeholder='joe@example.com'\n          value = {this.state.email}\n            onChange = {this.handleChange}\n          width={10}\n          required\n        />\n        <Form.Field\n          id='mobno'\n          name='mobno'\n          control={Input}\n          label='Mobile no.'\n          placeholder='Mobile no.'\n          value = {this.state.mobno}\n            onChange = {this.handleChange}\n          required\n          width={10}\n        />\n        <Form.Field\n          id='adharno'\n          name='adharno'\n          control={Input}\n          label='Adhar No.'\n          placeholder='Adhar no.'\n          value = {this.state.adharno}\n            onChange = {this.handleChange}\n          required\n          width={10}\n        />\n        <Form.Field\n          id='identity'\n          name='identity'\n          control={Input}\n          label='Identity No.'\n          placeholder='Identity no.'\n          value = {this.state.identity}\n            onChange = {this.handleChange}\n          required\n          width={10}\n        />\n        <Form.Field\n          id='blockchainaddress'\n          name='blockchainaddress'\n          control={Input}\n          label='Blockchain Address'\n          placeholder='Blockchain Address'\n          value = {this.state.blockchainaddress}\n            onChange = {this.handleChange}\n          required\n          width={10}\n        />\n       <Form.Field\n          id='address'\n          name='address'\n          control={Input}\n          label='Address'\n          placeholder='Address'\n          value = {this.state.address}\n            onChange = {this.handleChange}\n          required\n        />\n        <Form.Group>\n        <Form.Field\n          id='Zip Code'\n          name='zip'\n          control={Input}\n          label='Zip Code'\n          placeholder='Zip Code'\n          value = {this.state.zip}\n            onChange = {this.handleChange}\n          required\n        />\n        <Form.Field\n          id='state'\n          name='state'\n          control={Input}\n          label='State'\n          placeholder='State'\n          value = {this.state.state}\n            onChange = {this.handleChange}\n         required\n       />\n       <Form.Field\n         id='Country'\n         name='country'\n         control={Input}\n         label='Country'\n         placeholder='Country'\n         value = {this.state.country}\n            onChange = {this.handleChange}\n         required\n       />\n       </Form.Group>\n       <br />\n       <input type=\"submit\" value=\"Submit\" className='btn-submit'/>\n\n     </Form>\n     </div>\n   )\n}\n}\nexport default DoctorRegisteration;","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/PatientRegisteration/PatientRegisteration.js",[],"/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/History/history.js",["102","103"],"import React, { Component } from 'react'\nimport { FaUserMd,FaAddressCard,FaNotesMedical, FaUsers } from 'react-icons/fa'\nimport './history.css'\nimport {Link} from 'react-router-dom'\nimport web3 from '../../../ethereum/web3'\nimport {connectToPatients,\n    connectToDoctor,\n    addToPatients,\n    addToDoctor,\n    doctorDetails,\n    patientDetails\n  } from '../../Eth/Ethutil' ;\n  import Admin from '../../../ethereum/Admin'\n\n\nclass History extends Component {\n    state = {\n        name:'',\n        mno:'',\n        id:'',\n        len:0,\n        record:[],\n        finalObj:[],\n        account:''\n    }\n    async componentDidMount(){\n        const accounts = await web3.eth.getAccounts();\n        const dExist = await Admin.methods.existD(accounts[0]).call()\n        if(!dExist){\n        alert(\"Doctor does not exist on this address\");\n        }else{\n        const dAddr = await addToDoctor(accounts[0]);\n        const {nme,mno,id,len} =  await doctorDetails(dAddr)\n        let record = []\n        const doctor = await connectToDoctor(dAddr) \n        this.setState({account:accounts[0]})\n\n\n        for(let i=0;i<len;i++){\n            let temp = await doctor.methods.pRecord(i).call()\n           let obj = {\n               date:temp[0],\n               details:temp[2],\n               hash:temp[3],\n               patient:temp[1]\n           }\n           record.push(obj)\n           //console.log(obj);\n        }\n        console.log(record);\n        this.setState({\n            name:nme,\n            mno,\n            id,\n            len,\n            record\n        })\n\n        for(let i=0; i < this.state.record.length; i++){\n            console.log(1);\n            const patient = await connectToPatients(this.state.record[i].patient);\n            console.log(2);\n            const pId = await patient.methods.owner().call();\n            console.log(3);\n            const pName = await patient.methods.name().call();\n            console.log(4);\n            const date = this.uToTime(this.state.record[i].date)\n            console.log(5);\n            const obj = {\n                pName,\n                pId,\n                date,\n                patient:this.state.record[i].patient,\n                details:this.state.record[i].details,\n                hash:this.state.record[i].hash,\n            }\n            console.log(6);\n            const temp = [...this.state.finalObj, obj]\n            console.log(7);\n            this.setState({\n                finalObj:temp\n            })\n        }\n        console.log(8);\n        console.log(this.state.finalObj);\n    }\n    }\n\n   uToTime(t){\n    const milliseconds = t * 1000 \n    const dateObject = new Date(milliseconds)\n    const humanDateFormat = dateObject.toLocaleString()\n       const arr = humanDateFormat.split(',')\n       return arr[0]\n   }\n   \n\n    render() {\n        return (\n            <div className=\"history-main\">\n            <h1 className=\"greet-doc\">Welcome back srv smn !!!</h1>\n            <div class=\"ui cards\">\n              <div className=\"card doc-card\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-4 doc-detail-1\"><FaUserMd size='4em' color='white' className=\"faicons\"/></div>\n                            <div className=\"col-8 doc-card-content\">\n                                <h2>{this.state.name}</h2>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"card doc-card\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-4 doc-detail-2\"><FaAddressCard size='4em' color='white' className=\"faicons\"/></div>\n                            <div className=\"col-8 doc-card-content\">\n                                <h4>{this.state.mno}</h4>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"card doc-card\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-4 doc-detail-3\"><FaNotesMedical size='4em' color='white' className=\"faicons\"/></div>\n                            <div className=\"col-8 doc-card-content\">\n                            <h4>ID: {this.state.id}</h4></div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"card doc-card\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-4 doc-detail-4\"><FaUsers size='4em' color='white' className=\"faicons\"/></div>\n                            <div className=\"col-8 doc-card-content\">\n                            <h4>Total Patient : {this.state.len}</h4></div>\n                        </div>\n                    </div>\n                </div>\n            </div> \n\n\n                <div className=\"col-lg-12 grid-margin stretch-card\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                    <h2 className=\"card-title\">\n                        <span>\n                        <h1>History</h1>\n                        </span>\n                    </h2>\n                    <div className=\"table-responsive\">\n                        <table className=\"table table-striped\">\n                        <thead>\n                            <tr>\n                            <th> User ID </th>\n                            <th> Name </th>\n                            <th> Date</th>\n                            <th> Details</th>\n                            <th>  View </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                           {\n                                this.state.finalObj.reverse().map((rec, index) =>{\n                                  return(\n                                 <tr>\n                                 <td>{rec.pId}</td>\n                                 <td>{rec.pName}</td>\n                                 <td>{rec.date}</td>\n                                 <td>{rec.details}</td>\n                                 <td>\n                                     <Link to={\n                                                    { \n                                                        pathname: \"/viewdata\",\n                                                        myCustomProps: {...rec, dAddr:this.state.account}\n                                                    }\n                                                }>\n                                     <input type=\"submit\" value='View' className=\"btn-history\"/>\n                                     </Link>\n                                 </td>\n                                 </tr>\n                                )\n                            })\n\n                           }\n                        </tbody>\n                        </table>\n                    </div>\n                    </div>\n                </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default History;","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/AddPatientData/AddPatientData.js",["104","105","106","107"],"/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/ViewData/ViewData.js",["108","109","110","111","112","113","114","115","116","117","118"],"/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/PatientSide/AccesstoDoctor/AccesstoDoctor.js",["119","120","121","122","123"],"import React, { Component } from 'react'\nimport {FaAddressCard,FaUserMd,FaNotesMedical, FaSearchPlus, FaKey} from 'react-icons/fa'\nimport {TiTick} from 'react-icons/ti'\nimport {ImCross} from 'react-icons/im'\nimport {Form, Button} from 'react-bootstrap'\nimport './accesstodoctor.css'\nimport web3 from '../../../../ethereum/web3'\nimport Admin from '../../../../ethereum/Admin'\nimport {connectToPatients,\n    connectToDoctor,\n    addToPatients,\n    addToDoctor,\n    doctorDetails,\n    patientDetails,\n    rwAccess\n  } from '../../../Eth/Ethutil' ;\n\nclass AccesstoDoctor extends Component {\n    constructor(props){\n        super(props);\n        \n        this.state = {value: '',\n                    account:'',\n                    count:0,\n                    dName:'',\n                    dId:'',\n                    dMNO:'',\n                    r : <ImCross />,\n                     rw : <ImCross />,\n                     disabled:true\n    };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmitSearch = this.handleSubmitSearch.bind(this);\n        this.handleSubmitView = this.handleSubmitView.bind(this);\n        this.handleSubmitWrite = this.handleSubmitWrite.bind(this);\n        this.handleSubmitRemoveView = this.handleSubmitRemoveView.bind(this);\n        this.handleSubmitRemoveWrite = this.handleSubmitRemoveWrite.bind(this);\n    }\n    async componentDidMount(){\n        const accounts = await web3.eth.getAccounts();\n        const pExist = await Admin.methods.existP(accounts[0]).call()\n        if(!pExist)\n        alert(\"Patients does not exist on this address\");\n        this.setState({\n          account:accounts[0]\n        })\n    }\n    async handleSubmitRemoveView(event){\n        event.preventDefault();\n        const pAddr = await addToPatients(this.state.account)\n        const patient = await connectToPatients(pAddr)\n        await patient.methods.removeViewer(this.state.value).send({\n            from:this.state.account\n        })\n\n\n    }\n\n    async handleSubmitRemoveWrite(event){\n        event.preventDefault();\n        const pAddr = await addToPatients(this.state.account)\n        const patient = await connectToPatients(pAddr)\n       const dAddr = await addToDoctor(this.state.value)\n        await patient.methods.removeEditor(dAddr).send({\n            from:this.state.account\n        })\n        \n    }\n    async handleSubmitSearch(event) {\n        event.preventDefault();\n        let dExist = false;\n        if(web3.utils.checkAddressChecksum(this.state.value)){\n          dExist = await Admin.methods.existD(this.state.value).call()\n        }\n\n        if(!dExist)\n        {\n          alert(\"Doctor does not exist on this address\");\n        }else{\n            const dAddr = await addToDoctor(this.state.value)\n            const {nme,mno,id} =  await doctorDetails(dAddr)\n            let{read,write} =  await rwAccess(this.state.account, this.state.value)\n            let r = read\n            let rw = write\n            if(r==true){\n                this.setState({r: <TiTick size=\"2em\"/>})\n            }\n            if(rw==true){\n                this.setState({rw: <TiTick size=\"2em\"/>})\n            }\n            this.setState({\n              dName:nme,\n              dId:id,\n              dMNO:mno,\n              count:1,\n              disabled:false\n            })\n          }\n    }\n\n    async handleSubmitView(event) {\n        event.preventDefault();\n        const pExist = await Admin.methods.existP(this.state.account).call()\n        if(!pExist)\n        {\n          alert(\"You are not a Patient , Unable to call method\");\n        } else{\n\n        const pAddr = await addToPatients(this.state.account)\n        const patient = await connectToPatients(pAddr)\n\n        let dExist = false\n        if(web3.utils.checkAddressChecksum(this.state.value)){\n            dExist = await Admin.methods.existD(this.state.value).call()\n          }\n        \n        if(dExist){\n            await patient.methods.addViewer(this.state.value).send({\n                from:this.state.account\n            })\n        } else{\n            alert(\"Doctor does not exist on this address\");\n        }\n    }\n\n\n\n    }\n\n    async handleSubmitWrite(event) {\n        event.preventDefault();\n        const pExist = await Admin.methods.existP(this.state.account).call()\n        if(!pExist)\n        {\n          alert(\"You are not a Patient , Unable to call method\");\n        } else{\n\n        const pAddr = await addToPatients(this.state.account)\n        const patient = await connectToPatients(pAddr)\n\n        let dExist = false\n        let dAddr\n        if(web3.utils.checkAddressChecksum(this.state.value)){\n            dExist = await Admin.methods.existD(this.state.value).call()\n             dAddr = await addToDoctor(this.state.value)\n          }\n        \n        if(dExist){\n            await patient.methods.addEditor(dAddr).send({\n                from:this.state.account\n            })\n        } else{\n            alert(\"Doctor does not exist on this address\");\n        }\n    }\n        \n    }\n\n\n        handleChange=(e)=>{\n            this.setState({value : e.target.value})\n            console.log(this.state)\n        }\n    readHTM(){\n        return(\n            <div class=\"ui cards\">\n            <div className=\"card doc-card\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-4 doc-detail-1\"><FaUserMd size='4em' color='white' className=\"faicons\"/></div>\n                            <div className=\"col-8 doc-card-content\">\n                                <h2>{this.state.dName}</h2>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"card doc-card\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-4 doc-detail-2\"><FaAddressCard size='4em' color='white' className=\"faicons\"/></div>\n                            <div className=\"col-8 doc-card-content\">\n                            <h4>Contact : {this.state.dMNO}</h4>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"card doc-card\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-4 doc-detail-3\"><FaNotesMedical size='4em' color='white' className=\"faicons\"/></div>\n                            <div className=\"col-8 doc-card-content\">\n                            <h4>ID : {this.state.dId}</h4>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"card doc-card\">\n                  <div className=\"container\">\n                  <div className=\"row\">\n                      <div className=\"col-4 access-1\">\n                        <FaKey size='4em' color='white' className=\"faicons\"/>\n                      </div>  \n                      <div className=\"col-8 access-2\">  \n                        <div className=\"row\">\n                            <div className=\"read-write\">\n                            Read &nbsp; {this.state.r} <br />\n                            Read + Write &nbsp; {this.state.rw}\n                            </div>\n                       </div>\n                      </div>   \n                    </div>\n                  </div>\n              </div>\n\n            </div> \n        )\n    }\n    render() {\n        let htm = null\n        if(this.state.count != 0){\n            htm = this.readHTM()\n        }\n        return (\n            <div className=\"access-to-doctor-main\">\n                <div className=\"container\">\n               {htm}\n\n                <div className=\"access-to-doctor\">\n                <div className=\"container\">\n                <Form>\n                    <Form.Group >\n                        <Form.Label>Blockchain Address</Form.Label>\n                        <Form.Control \n                            type=\"text\" \n                            placeholder=\"Blockchain Address\"\n                            value = {this.state.value}\n                            onChange = {this.handleChange} />\n                    </Form.Group>\n                </Form>  \n                <Button variant=\"primary\" className=\"py-2 btns\" onClick={this.handleSubmitSearch} > Search <FaSearchPlus color = \"white\"/> </Button>\n                <Button variant=\"success\" className=\"py-2 btns\" onClick={this.handleSubmitView} disabled={this.state.disabled}>Add View</Button>\n                <Button variant=\"success\" className=\"py-2 btns\" onClick={this.handleSubmitWrite} disabled={this.state.disabled}> Add Write</Button>  \n                <Button variant=\"danger\" className=\"py-2 btns\" onClick={this.handleSubmitRemoveView} disabled={this.state.disabled}>Remove View</Button>\n                <Button variant=\"danger\" className=\"py-2 \" onClick={this.handleSubmitRemoveWrite} disabled={this.state.disabled}>Remove Write</Button>\n                </div> \n                </div> \n                </div>\n                </div>\n        )\n    }\n}\n\n\nexport default AccesstoDoctor;","/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/PatientSide/PatientFullDetail/FullDetail.js",["124","125","126","127","128"],"/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/ethereum/web3.js",[],"/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/ethereum/Admin.js",[],"/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Eth/Ethutil.js",[],"/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/ipfs.js",[],"/home/sourav/Documents/Programming/Blockchain-in-healthcare/src/utils/Containers/viewToDoctor/viewToDoctor.js",["129","130","131","132","133"],{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","severity":1,"message":"139","line":7,"column":8,"nodeType":"140","messageId":"141","endLine":7,"endColumn":17},{"ruleId":"138","severity":1,"message":"142","line":8,"column":8,"nodeType":"140","messageId":"141","endLine":8,"endColumn":21},{"ruleId":"138","severity":1,"message":"143","line":2,"column":10,"nodeType":"140","messageId":"141","endLine":2,"endColumn":16},{"ruleId":"138","severity":1,"message":"144","line":2,"column":17,"nodeType":"140","messageId":"141","endLine":2,"endColumn":21},{"ruleId":"138","severity":1,"message":"145","line":2,"column":22,"nodeType":"140","messageId":"141","endLine":2,"endColumn":33},{"ruleId":"138","severity":1,"message":"146","line":4,"column":8,"nodeType":"140","messageId":"141","endLine":4,"endColumn":12},{"ruleId":"138","severity":1,"message":"147","line":5,"column":8,"nodeType":"140","messageId":"141","endLine":5,"endColumn":13},{"ruleId":"138","severity":1,"message":"148","line":6,"column":9,"nodeType":"140","messageId":"141","endLine":6,"endColumn":26},{"ruleId":"138","severity":1,"message":"149","line":7,"column":3,"nodeType":"140","messageId":"141","endLine":7,"endColumn":18},{"ruleId":"138","severity":1,"message":"150","line":8,"column":5,"nodeType":"140","messageId":"141","endLine":8,"endColumn":18},{"ruleId":"138","severity":1,"message":"151","line":11,"column":5,"nodeType":"140","messageId":"141","endLine":11,"endColumn":19},{"ruleId":"138","severity":1,"message":"148","line":10,"column":9,"nodeType":"140","messageId":"141","endLine":10,"endColumn":26},{"ruleId":"138","severity":1,"message":"152","line":14,"column":3,"nodeType":"140","messageId":"141","endLine":14,"endColumn":16},{"ruleId":"153","severity":1,"message":"154","line":190,"column":13,"nodeType":"155","messageId":"156","endLine":190,"endColumn":15},{"ruleId":"153","severity":1,"message":"154","line":193,"column":14,"nodeType":"155","messageId":"156","endLine":193,"endColumn":16},{"ruleId":"138","severity":1,"message":"146","line":4,"column":8,"nodeType":"140","messageId":"141","endLine":4,"endColumn":12},{"ruleId":"138","severity":1,"message":"147","line":5,"column":8,"nodeType":"140","messageId":"141","endLine":5,"endColumn":13},{"ruleId":"138","severity":1,"message":"148","line":7,"column":5,"nodeType":"140","messageId":"141","endLine":7,"endColumn":22},{"ruleId":"138","severity":1,"message":"149","line":8,"column":5,"nodeType":"140","messageId":"141","endLine":8,"endColumn":20},{"ruleId":"138","severity":1,"message":"150","line":9,"column":5,"nodeType":"140","messageId":"141","endLine":9,"endColumn":18},{"ruleId":"138","severity":1,"message":"157","line":10,"column":5,"nodeType":"140","messageId":"141","endLine":10,"endColumn":16},{"ruleId":"138","severity":1,"message":"152","line":11,"column":5,"nodeType":"140","messageId":"141","endLine":11,"endColumn":18},{"ruleId":"138","severity":1,"message":"158","line":40,"column":17,"nodeType":"140","messageId":"141","endLine":40,"endColumn":20},{"ruleId":"153","severity":1,"message":"154","line":44,"column":18,"nodeType":"155","messageId":"156","endLine":44,"endColumn":20},{"ruleId":"153","severity":1,"message":"154","line":47,"column":19,"nodeType":"155","messageId":"156","endLine":47,"endColumn":21},{"ruleId":"159","severity":1,"message":"160","line":147,"column":37,"nodeType":"161","endLine":147,"endColumn":145},{"ruleId":"138","severity":1,"message":"149","line":10,"column":5,"nodeType":"140","messageId":"141","endLine":10,"endColumn":20},{"ruleId":"138","severity":1,"message":"151","line":14,"column":5,"nodeType":"140","messageId":"141","endLine":14,"endColumn":19},{"ruleId":"153","severity":1,"message":"154","line":86,"column":17,"nodeType":"155","messageId":"156","endLine":86,"endColumn":19},{"ruleId":"153","severity":1,"message":"154","line":89,"column":18,"nodeType":"155","messageId":"156","endLine":89,"endColumn":20},{"ruleId":"153","severity":1,"message":"162","line":223,"column":29,"nodeType":"155","messageId":"156","endLine":223,"endColumn":31},{"ruleId":"138","severity":1,"message":"163","line":9,"column":49,"nodeType":"140","messageId":"141","endLine":9,"endColumn":54},{"ruleId":"138","severity":1,"message":"157","line":19,"column":2,"nodeType":"140","messageId":"141","endLine":19,"endColumn":13},{"ruleId":"138","severity":1,"message":"152","line":20,"column":2,"nodeType":"140","messageId":"141","endLine":20,"endColumn":15},{"ruleId":"138","severity":1,"message":"164","line":22,"column":2,"nodeType":"140","messageId":"141","endLine":22,"endColumn":10},{"ruleId":"159","severity":1,"message":"160","line":205,"column":16,"nodeType":"161","endLine":205,"endColumn":126},{"ruleId":"138","severity":1,"message":"163","line":9,"column":49,"nodeType":"140","messageId":"141","endLine":9,"endColumn":54},{"ruleId":"138","severity":1,"message":"157","line":19,"column":2,"nodeType":"140","messageId":"141","endLine":19,"endColumn":13},{"ruleId":"138","severity":1,"message":"152","line":20,"column":2,"nodeType":"140","messageId":"141","endLine":20,"endColumn":15},{"ruleId":"138","severity":1,"message":"164","line":22,"column":2,"nodeType":"140","messageId":"141","endLine":22,"endColumn":10},{"ruleId":"159","severity":1,"message":"160","line":206,"column":16,"nodeType":"161","endLine":206,"endColumn":126},"no-native-reassign",["165"],"no-negated-in-lhs",["166"],"no-unused-vars","'SearchDoc' is defined but never used.","Identifier","unusedVar","'SearchPatient' is defined but never used.","'Button' is defined but never used.","'Form' is defined but never used.","'FormControl' is defined but never used.","'web3' is defined but never used.","'Admin' is defined but never used.","'connectToPatients' is defined but never used.","'connectToDoctor' is defined but never used.","'addToPatients' is defined but never used.","'patientDetails' is defined but never used.","'doctorDetails' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'addToDoctor' is defined but never used.","'nme' is assigned a value but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","Expected '!==' and instead saw '!='.","'FaKey' is defined but never used.","'rwAccess' is defined but never used.","no-global-assign","no-unsafe-negation"]